buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
   }

    dependencies {
        classpath  "gradle.plugin.com.github.eerohele:saxon-gradle:0.2.1"
    }
}

apply plugin: 'java'
apply plugin: "com.github.eerohele.saxon-gradle"
apply plugin: 'maven'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

sourceSets {
    main {
        resources {
            exclude '**'
        }
    }
}

dependencies {
    compile group: 'org.jvoicexml', name: 'javax.speech', version: '0.6-SNAPSHOT'
    compile group: 'org.jvoicexml', name: 'org.jvoicexml.jsapi2', version: '0.6-SNAPSHOT'
    compile group: 'org.jvoicexml', name: 'org.jvoicexml.jsapi2.freetts', version: '0.6-SNAPSHOT'
    compile group: 'org.jvoicexml', name: 'org.jvoicexml.jsapi2.sphinx4', version: '0.6-SNAPSHOT'
    compile group: 'org.jvoicexml', name: 'org.jvoicexml.jsapi2.sapi', version: '0.6-SNAPSHOT'
    compile group: 'org.jvoicexml', name: 'cmu_us_kal', version: '1.2.3-SNAPSHOT'
    
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile project(path: ':org.jvoicexml', configuration: 'testArtifacts')

    compile project(':org.jvoicexml')
    compile project(':org.jvoicexml.client')
}

task xsltSphinxFreeTTS(type: com.github.eerohele.SaxonXsltTask) {
    stylesheet "${projectDir}/src/main/resources/patch-configuration.xsl"
    input "${projectDir}/src/main/resources/jsapi20-implementation.xml"
    output "${project(':org.jvoicexml').copyConfiguration.destinationDir}/jsapi20-implementation.xml"
    parameters(
        buildpath: "${buildDir}/libs",
        version: JVOICEXML_VERSION,
        libs: configurations.compile
    )
}

task xsltSphinxFreeTTSDistribution(type: com.github.eerohele.SaxonXsltTask) {
    stylesheet "${projectDir}/src/main/resources/patch-configuration.xsl"
    input "${projectDir}/src/main/resources/jsapi20-implementation.xml"
    output "${project(':main').buildDir}/config/jsapi20-implementation.xml"
    parameters(
        buildpath: "lib",
        version: JVOICEXML_VERSION,
        libs: configurations.compile
    )
}

task xsltSAPI(type: com.github.eerohele.SaxonXsltTask) {
    stylesheet "${projectDir}/src/main/resources/patch-configuration.xsl"
    input "${projectDir}/src/main/resources/jsapi20-sapi-implementation.xml"
    output "${project(':org.jvoicexml').copyConfiguration.destinationDir}/jsapi20-sapi-implementation.xml"
    parameters(
        buildpath: "${buildDir}/libs",
        version: JVOICEXML_VERSION,
        libs: configurations.compile
    )
}

task xsltSAPIDistribution(type: com.github.eerohele.SaxonXsltTask) {
    stylesheet "${projectDir}/src/main/resources/patch-configuration.xsl"
    input "${projectDir}/src/main/resources/jsapi20-sapi-implementation.xml"
    output "${project(':main').buildDir}/config/jsapi20-sapi-implementation.xml"
    parameters(
        buildpath: "lib",
        version: JVOICEXML_VERSION,
        libs: configurations.compile
    )
}

task copyReferencedLibraries(type: Copy) {
    into "$buildDir/libs"
    from(configurations.compile) {
         include 'freetts*.jar',
         'cmu_us_kal*.jar',
         'cmulex*.jar',
         'cmutimelex*.jar',
         'en_us*.jar',
         'sphinx4*.jar',
         'javax.speech*.jar',
         'org.jvoicexml.jsapi2*.jar'
    }
}

task copyJNI(type: Copy) {
    dependsOn copyReferencedLibraries
    
    from(zipTree("$buildDir/libs/org.jvoicexml.jsapi2.sapi-0.6-SNAPSHOT.jar")) {
         include '*.dll'
    }
    into "${project(':org.jvoicexml').buildDir}/jni"
}

jar {
    version = JVOICEXML_VERSION

    dependsOn xsltSphinxFreeTTS {
        onlyIf { 
            project.property('JVOICEXML_IMPLEMENTATION_JSAPI20_FREETTSSPHINX') == 'true'
        }
    }
    dependsOn xsltSphinxFreeTTSDistribution
    dependsOn xsltSAPI {
        onlyIf { 
            project.property('JVOICEXML_IMPLEMENTATION_JSAPI20_SAPI') == 'true'
        }
    }
    dependsOn xsltSAPIDistribution
    
    dependsOn copyJNI
    dependsOn copyReferencedLibraries

    manifest {
        attributes("Implementation-Title": "JVoiceXML JSAPI 2.0 implementation platform",
                   'Implementation-Vendor': 'switch',
                   'Implementation-Version': JVOICEXML_VERSION,
                   'Built-By'       : System.properties['user.name'],
                   'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                   'Created-By'     : "Gradle ${gradle.gradleVersion}",
                   'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                   'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
    baseName 'org.jvoicexml.implementation.jsapi20'
}

install {
   version = JVOICEXML_VERSION
   group = JVOICEXML_GROUP
}

clean {
    delete file("${project(':org.jvoicexml').copyConfiguration.destinationDir}/jsapi20-implementation.xml")
    delete file("${project(':org.jvoicexml').copyConfiguration.destinationDir}/jsapi20-sapi-implementation.xml")
    delete file("${project(':org.jvoicexml').buildDir}/jni/Jsapi2SapiBridge.dll")
    delete file("${project(':org.jvoicexml').buildDir}/jni/Jsapi2SapiBridge_x64.dll")
}
