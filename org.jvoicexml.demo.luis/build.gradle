buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'com.github.eerohele.saxon-gradle' version '0.8.0'
    id 'application'
    id 'checkstyle'
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = JVOICEXML_GROUP
version = JVOICEXML_VERSION

configurations {
    jvxmlConfiguration
}

def jvxmlConfigurationDir = "${projectDir}/src/main/config"

checkstyle {
    configFile file("${project(':org.jvoicexml').projectDir}/src/templates/jvoicexml-checks.xml")
}

dependencies {
    jvxmlConfiguration fileTree(jvxmlConfigurationDir)
    
    compile fileTree(dir: rootDir, include: ['*.properties'])
    if (project.property('JVOICEXML_DEVELOPMENT_ENVIRONMENT') == 'true') {
        compile project(':org.jvoicexml.client')
        compile project(':org.jvoicexml.client.text')
        compile project(':org.jvoicexml.xml')

        runtime project(':org.jvoicexml.jndi')
    } else {
        compile group: 'org.jvoicexml', name: 'org.jvoicexml.client', version: JVOICEXML_VERSION
        compile group: 'org.jvoicexml', name: 'org.jvoicexml.client.text', version: JVOICEXML_VERSION
        compile group: 'org.jvoicexml', name: 'org.jvoicexml.xml', version: JVOICEXML_VERSION
    
        runtime group: 'org.jvoicexml', name: 'org.jvoicexml.jndi', version: JVOICEXML_VERSION
    }
}

xslt {
    stylesheet "${jvxmlConfigurationDir}/patch-vxml.xsl"
    input "${jvxmlConfigurationDir}/pizza.vxml"
    output "${sourceSets.main.output.resourcesDir}/pizza.vxml"
    parameters(
        applicationId: project.property('JVOICEXML_DEMO_LUIS_APPLICATIONID')
    )
}

jar {
    dependsOn xslt

    manifest {
        attributes("Implementation-Title": "JVoiceXML LUIS Demo",
                   'Implementation-Vendor': 'switch',
                   'Implementation-Version': JVOICEXML_VERSION,
                   'Built-By'       : System.properties['user.name'],
                   'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                   'Created-By'     : "Gradle ${gradle.gradleVersion}",
                   'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                   'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
    baseName 'org.jvoicexml.demo.luis'
}

def getIP() {
    InetAddress result = null;
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement();
            if (!address.isLoopbackAddress()) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress();
                } else if (result == null) {
                    result = address;
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
}

run {
    dependsOn xslt
    
    mainClassName = "org.jvoicexml.demo.luis.LUISDemo"
    classpath += files("${buildDir}/resources/main")
    jvmArgs = ["-Djvoicexml.config=${buildDir}/resources/main",
               "-Djava.security.manager",
               "-Djava.rmi.server.codebase=http://${getIP()}:9698/",
               "-Djava.rmi.server.useCodebaseOnly=false",
               "-Djava.security.policy=${jvxmlConfigurationDir}/jvoicexml.policy"]
}

