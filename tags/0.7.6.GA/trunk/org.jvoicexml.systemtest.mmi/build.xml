<project name="org.jvoicexml.systemtest.mmi" default="run" basedir=".">
    <description>
This file builds and runs the MMI system test for JVoiceXml.

To override the current settings follow the instructions given in
personal-props/README.txt
  </description>

    <!-- allow the user to override setting in an own properties file. -->
    <property file="../org.jvoicexml/personal-props/ant.properties" />
    <property file="../org.jvoicexml/config-props/ant.properties" />

    <!-- Load the settings for 3rdparty libraries -->
    <import file="3rdparty-libs.xml" />

    <target name="-setup" depends="-local-3rdparty-setup">
        <!-- The component built here-->
        <property name="component" value="org.jvoicexml.systemtest.mmi" />

        <!-- directory structure -->
        <property name="src" value="src" />
        <property name="unitTests" value="unittests" />
        <property name="build" value="classes" />
        <property name="dist" value="${jvxml.core.dir}/dist" />
        <property name="apidoc.basedir" value="${jvxml.core.dir}/doc/api" />
        <property name="apidoc" value="${apidoc.basedir}/${component}" />
        <property name="config" value="${jvxml.core.dir}/config" />
        <property name="etc" value="${jvxml.core.dir}/etc" />

        <property name="junit.report" value="site/junit" />

        <condition property="windows">
            <os family="windows" />
        </condition>

        <!-- main jar files -->
        <property name="dist.systemtest.jar" value="${dist}/${component}.jar" />

        <!-- the class path for 3rdparty libraries -->
        <path id="project.classpath">
            <path refid="jvxml.core.lib" />
            <fileset refid="log4j.lib" />
            <fileset refid="rhino.lib" />
            <fileset refid="jsonsimple.lib" />
            <fileset refid="pool.lib" />
            <fileset refid="httpcore.lib" />
            <fileset refid="httpclient.lib" />
            <fileset refid="jlibrtp.lib" />
            <fileset refid="jchardet.lib" />
            <pathelement location="${dist}/jvxml-client-text.jar" />
            <pathelement location="${dist}/org.jvoicexml.implementation.text.jar" />
            <pathelement location="${build}" />
        </path>
      <path id="run.classpath">
          <path refid="project.classpath" />
          <fileset refid="loggings.lib" />
          <fileset refid="codec.lib"/>
          <fileset refid="spring.lib"/>
          <pathelement path="${build}" />
          <pathelement location="../org.jvoicexml.client/classes" />
          <pathelement location="../org.jvoicexml.xml/classes" />
          <pathelement location="../org.jvoicexml.processor.srgs/classes" />
          <pathelement location="${config}" />
      </path>
    </target>

    <target name="-init" depends="-setup">
        <!-- Create build directories -->
        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />
    </target>

    <target name="-initdocs" unless="distribution">
        <property name="access" value="private" />
    </target>

    <target name="-initcompile" unless="distribution">
        <property name="optimize" value="off" />
        <property name="debug" value="on" />
    </target>

    <target name="clean" depends="-setup" description="Remove all compiled and distribution files">
        <delete dir="${build}" failonerror="false" />
    </target>

    <target name="createSystemTestConfiguration" depends="-setup">
        <echo file="${jvxml.core.dir}/personal-props/platforms.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
    <platforms>
      <platform name="org.jvoicexml.callmanager.mmi" />
      <platform name="org.jvoicexml.implementation.text" />
    </platforms>
]]>
        </echo>
        <ant antfile="${jvxml.core.dir}/configuration.xml"
            inheritall="false" inheritrefs="false" dir="${jvxml.core.dir}">
          <property name="enableJndi" value="false"/>
        </ant>
      <xslt in="${config}/mmi-callmanager.xml"
        out="${config}/test-mmi-callmanager.xml"
        style="etc/patch-mmi-config.xsl">
          <outputproperty name="method" value="xml" />
          <outputproperty name="standalone" value="no" />
          <outputproperty name="encoding" value="UTF-8" />
          <outputproperty name="indent" value="yes" />
        <param name="jvxmlbase" expression="${jvxml.core.dir}" />
      </xslt>
      <delete file="${config}/mmi-callmanager.xml"/>
    </target>

    <target name="compile-jvxml" depends="createSystemTestConfiguration"
      description="Create JVoiceXML core jar files">
        <echo message="Create JVoiceXML core jare files" />
        <ant antfile="${jvxml.core.dir}/build.xml" 
            dir="${jvxml.core.dir}"
            target="jar" 
            inheritAll="false" inheritrefs="false" />
    </target>

    <target name="compile" depends="-init,-initcompile,compile-jvxml,-checkJavaVersion" 
        	description="Compile the sources">
        <echo message="compiling system test layer with debug=${debug}, optimize=${optimize}" />
        <javac destdir="${build}" optimize="${optimize}" debug="${debug}"
        	deprecation="on" includeantruntime="false">
            <src path="${src}" />
            <include name="org/jvoicexml/systemtest/mmi/**/*.java" />
            <classpath refid="project.classpath" />
            <compilerarg value="-Xlint:unchecked" />
        </javac>
    </target>

    <target name="jar" depends="compile"
        description="Pack all compiled files into jar files">
        <!-- system test jar file -->
        <jar jarfile="${dist.systemtest.jar}" compress="false">
            <fileset dir="${build}">
                <include name="org/jvoicexml/systemtest/mmi/**/*.class" />
                <exclude name="org/jvoicexml/**/Test*.class" />
                <exclude name="org/jvoicexml/**/*Test.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <section name="common">
                    <attribute name="Implementation-Vendor" value="JVoiceXML group" />
                    <attribute name="Implementation-Title" value="JVoiceXML system test layer" />
                </section>
            </manifest>
        </jar>
    </target>

    <target name="rebuild" description="Rebuild the jars from scratch" depends="clean,jar" />

    <target name="apidoc" description="create javadoc" depends="-setup,-initdocs">
        <echo message="creating javadoc with access: ${access}" />

        <delete dir="${apidoc}" />
        <makeurl property="jvxml.core.apidoc" file="${apidoc.basedir}/org.jvoicexml" />

        <javadoc destdir="${apidoc}" windowtitle="JVoiceXML" author="true" version="true" access="${access}" use="true">
            <packageset dir="${src}" />
            <doctitle>
                <![CDATA[JVoiceXML - a free VoiceXML interpreter]]>
            </doctitle>
            <bottom>
                <![CDATA[<i>Copyright &#169; 2005-2009<a href="http://jvoicexml.sourceforge.net">JVoiceXML group</a>.</i>]]>
            </bottom>
	        <tag name="todo" description="Stuff to complete" />
	        <classpath>
	            <path refid="project.classpath" />
	        </classpath>
	        <link offline="true" href="http://java.sun.com/javase/6/docs/api/" packagelistLoc="${3rdparty.dir}" />
	        <link offline="true" href="${jvxml.core.apidoc}" packagelistLoc="${apidoc.basedir}/org.jvoicexml" />
	
	        <group title="JVoiceXML system test">
	            <package name="org.jvoicexml.systemtest*" />
	        </group>
	    </javadoc>
	</target>

	<target name="checkstyle" description="Check for JVoiceXML coding standard" depends="compile, -initcheckstyle" if="checkstyle.present">
	    <!-- checkstyle library -->
	    <checkstyle config="${etc}/jvoicexml-checks.xml">
	        <classpath>
	            <pathelement path="${project.classpath}" />
	            <pathelement location="${build}" />
	        </classpath>
	        <fileset dir="${src}">
	            <include name="org/jvoicexml/**/*.java" />
	        </fileset>
	    </checkstyle>
	</target>
	
	<target name="test.junit" depends="compile">
	    <echo message="junit test run..." />
	    <mkdir dir="${junit.report}" />
	    <junit printsummary="yes" fork="yes" timeout="180000"
	      haltonfailure="no" tempdir="${junit.report}" showoutput="true">
	        <classpath>
	            <path refid="project.classpath" />
	            <fileset refid="junit.lib" />
	        </classpath>
	        <formatter type="xml" />
	        <batchtest fork="yes" todir="${junit.report}">
	            <fileset dir="${unitTests}">
	                <include name="**/*Test.java" />
	                <exclude name="**/All*Tests.java" />
	                <exclude name="**/All*Test.java" />
	                <exclude name="**/All*.java" />
	            </fileset>
	        </batchtest>
	    </junit>
	</target>
	
	<target name="report">
	    <echo message="create html report for tests" />
	    <mkdir dir="${junit.report}" />
	    <junitreport todir="${junit.report}">
	        <fileset dir="${junit.report}">
	            <include name="TEST-*.xml" />
	        </fileset>
	        <report format="frames" todir="${junit.report}" />
	    </junitreport>
	</target>

    <target name="run" depends="jar">
      <java classname="org.jvoicexml.systemtest.mmi.MMISystemTest"
            fork="true"
            maxmemory="256m">
          <jvmarg value="-Djava.util.logging.config.file=${config}/logging.properties" />
          <jvmarg value="-Djava.security.policy=${config}/jvoicexml.policy" />
          <classpath refid="run.classpath" />
      </java>
    </target>

</project>
