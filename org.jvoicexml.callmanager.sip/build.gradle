buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'com.github.eerohele.saxon-gradle' version '0.8.0'
    id 'signing'
    id 'maven-publish'
    id 'checkstyle'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

sourceSets {
    main {
        resources {
            exclude '**'
        }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = JVOICEXML_GROUP
version = JVOICEXML_VERSION

configurations {
	jvxmlConfiguration
}

def jvxmlConfigurationDir = "${projectDir}/src/main/config"

checkstyle {
    configFile file("${project(':org.jvoicexml').projectDir}/src/templates/jvoicexml-checks.xml")
}

dependencies {
	jvxmlConfiguration fileTree(jvxmlConfigurationDir)

    compile project(':org.jvoicexml')
    compile project(':org.jvoicexml.client')
    compile project(':org.jvoicexml.client.mrcpv2')
    compile project(':org.jvoicexml.implementation.mrcpv2')
    compile project(':org.jvoicexml.zanzibar')
    
    compile group: 'org.jvoicexml', name: 'org.speechforge.cairo.client', version: '0.3.2-SNAPSHOT'
    compile group: 'org.jvoicexml', name: 'org.speechforge.cairo.sip', version: '0.3.2-SNAPSHOT'
    compile group: 'org.jvoicexml', name: 'org.speechforge.cairo.rtp', version: '0.3.2-SNAPSHOT'
    compile group: 'org.jvoicexml', name: 'org.mrcp4j', version: '0.3-SNAPSHOT'
    compile group: 'concurrent', name: 'concurrent', version: '1.3.4'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'javax.media', name: 'jmf', version: '2.1.1e'
    
    testCompile group: 'junit', name: 'junit', version: '4.13.2'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

def getIP() {
    InetAddress result = null;
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement();
            if (!address.isLoopbackAddress()) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress();
                } else if (result == null) {
                    result = address;
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
}

task xsltCallmanager(type: com.github.eerohele.SaxonXsltTask)  {
    stylesheet "${jvxmlConfigurationDir}/patch-configuration.xsl"
    input "${jvxmlConfigurationDir}/sip-callmanager.xml"
    output "${project(':org.jvoicexml').copyConfiguration.destinationDir}/sip-callmanager.xml"
    parameters(
        buildpath: "${buildDir}/libs",
        version: JVOICEXML_VERSION,
        libs: configurations.compile,
        address: JVOICEXML_IMPLEMENTATION_MRCPV2_SIP_ADDRESS,
        port: JVOICEXML_IMPLEMENTATION_MRCPV2_SIP_PORT,
        cairoAddress: "sip:cairo@${getIP()}",
        cairoHost: getIP(),
        cairoPort: JVOICEXML_IMPLEMENTATION_MRCPV2_CAIRO_PORT,
        baseReceiverRTPPort: JVOICEXML_IMPLEMENTATION_MRCPV2_CAIRO_BASE_RCV_RTP_PORT,
        baseTransmitterRTPPort: JVOICEXML_IMPLEMENTATION_MRCPV2_CAIRO_BASE_XMIT_RTP_PORT
    )
}

task xsltCallmanagerDistribution(type: com.github.eerohele.SaxonXsltTask) {
    stylesheet "${jvxmlConfigurationDir}/patch-configuration.xsl"
    input "${jvxmlConfigurationDir}/sip-callmanager.xml"
    output "${project(':org.jvoicexml').copyConfigurationDistribution.destinationDir}/sip-callmanager.xml"
    parameters(
        buildpath: "lib",
        version: JVOICEXML_VERSION,
        libs: configurations.compile,
        address: JVOICEXML_IMPLEMENTATION_MRCPV2_SIP_ADDRESS,
        port: JVOICEXML_IMPLEMENTATION_MRCPV2_SIP_PORT,
        cairoAddress: JVOICEXML_IMPLEMENTATION_MRCPV2_CAIRO_ADDRESS,
        cairoHost: JVOICEXML_IMPLEMENTATION_MRCPV2_CAIRO_HOST,
        cairoPort: JVOICEXML_IMPLEMENTATION_MRCPV2_CAIRO_PORT,
        baseReceiverRTPPort: JVOICEXML_IMPLEMENTATION_MRCPV2_CAIRO_BASE_RCV_RTP_PORT,
        baseTransmitterRTPPort: JVOICEXML_IMPLEMENTATION_MRCPV2_CAIRO_BASE_XMIT_RTP_PORT
    )
}

task copyReferencedLibraries(type: Copy) {
    into "${buildDir}/libs"
    from(configurations.compile) {
        include 'org.speechforge.cairo.client*.jar',
         'org.speechforge.cairo.sip*.jar',
         'org.speechforge.cairo.rtp*.jar',
         'org.speechforge.cairo.server*.jar',
         'org.mrcp4j*.jar',
         'org.jvoicexml.client*.jar',
         'org.jvoicexml.client.mrcpv2*.jar',
         'org.jvoicexml.implementation.mrcpv2*.jar',
         'org.jvoicexml.zanzibar*.jar',
         'jain-sip-api*.jar',
         'jain-sip-ri*.jar',
         'nist-sdp*.jar',
         'concurrent*.jar',
         'commons-lang*.jar',
         'jmf*.jar'
    }
}

jar {
    version = JVOICEXML_VERSION

    dependsOn xsltCallmanager
    dependsOn xsltCallmanagerDistribution
    dependsOn copyReferencedLibraries

    manifest {
        attributes("Implementation-Title": "JVoiceXML SIP CallManager",
                   'Implementation-Vendor': 'switch',
                   'Implementation-Version': JVOICEXML_VERSION,
                   'Built-By'       : System.properties['user.name'],
                   'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                   'Created-By'     : "Gradle ${gradle.gradleVersion}",
                   'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                   'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
    baseName 'org.jvoicexml.callmanager.sip'
}

clean {
    delete file("${project(':org.jvoicexml').copyConfiguration.destinationDir}/sip-callmanager.xml")
    delete file("${project(':org.jvoicexml').copyConfigurationDistribution.destinationDir}/sip-callmanager.xml")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = tasks.jar.baseName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'JVoiceXML SIP CallManager'
                description = 'JVoiceXML SIP CallManager'
                url = 'https://github.com/JVoiceXML/JVoiceXML'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, Version 2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }
                developers {
                    developer {
                        id = 'schnelle'
                        name = 'Dirk Schnelle-Walka'
                        email = 'dirk.schnelle@jvoicexml.org'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:JVoiceXML/JVoiceXML.git'
                    developerConnection = 'scm:git:ssh://github.com:JVoiceXML/JVoiceXML.git'
                    url = 'https://github.com/JVoiceXML/JVoiceXML'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/" 
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = JVOICEXML_OSSRH_USERNAME
                password = JVOICEXML_OSSRH_PASSWORD
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

