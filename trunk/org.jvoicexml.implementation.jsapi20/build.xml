<project name="org.jvoicexml.implementation.jsapi20" default="jar" basedir=".">
    <description>
This file builds the JSAPI 2.0 implemenation platform for JVoiceXml.
To override the current settings follow the instructions given in
org.jvoicexml/personal-props/README.txt

If you want to compile JVoiceXML with JSAPI2 support you will have to download
the jsapi2.jar from http://www.conversations.com/jsapi2/release.php and
copy it into the folder 3rdparty/jsapi2.0/lib.
  </description>

    <!-- allow the user to override setting in an own propertiesfile. -->
    <property file="../org.jvoicexml/personal-props/ant.properties" />
    <property file="../org.jvoicexml/config-props/ant.properties" />

    <!-- Load the settings for 3rdparty libraries -->
    <import file="3rdparty-libs.xml" />

    <target name="-setup" depends="-local-3rdparty-setup">
        <!-- The component built here-->
        <property name="component"
            value="org.jvoicexml.implementation.jsapi20"/>
        <property name="component.path"
          value="org/jvoicexml/implementation/jsapi20"/>

         <!-- directory structure -->
        <property name="src" value="src" />
        <property name="build" value="classes" />
        <property name="config" value="../org.jvoicexml/config" />
        <property name="etc" value="etc" />
        <property name="dist" value="../org.jvoicexml/dist" />
        <property name="apidoc" value="${apidoc.basedir}/${component}" />

        <condition property="windows">
            <os family="windows" />
        </condition>

      <condition property="jvxml.jsapi20.sapi.use">
          <istrue value="${jvxml.jsapi20.sapi}" />
      </condition>

      <condition property="jvxml.jsapi20.mac.use">
         <istrue value="${jvxml.jsapi20.mac}" />
      </condition>

      <condition property="jvxml.jsapi20.default.use">
        <and>
          <isfalse value="${jvxml.jsapi20.sapi}" />
          <isfalse value="${jvxml.jsapi20.mac}" />
        </and>
      </condition>

        <!-- main jar files -->
        <property name="dist.jar" value="${dist}/${component}.jar" />

        <!-- the class path for 3rdparty libraries -->
        <path id="project.classpath">
            <path refid="jvxml.core.lib" />
            <fileset refid="log4j.lib" />
            <fileset refid="rhino.lib"/>
            <fileset refid="jsapi2.lib" />
        </path>
    </target>

    <target name="-init" depends="-setup">
        <!-- Create build directories -->
        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />

        <!-- Check for JSAPI 2 -->
        <path id="jsapi2.path">
            <fileset refid="jsapi2.lib" />
        </path>
        <available classpathref="jsapi2.path"
                   classname="javax.speech.AudioManager"
                   property="jsapi2.present" />
    </target>

  <target name="-sapiConfiguration" depends="-setup"
    if="jvxml.jsapi20.sapi.use">
    <xslt in="${jvxml.core.dir}/run.xml"
      out="${jvxml.core.dir}/run-tmp.xml"
      style="${etc}/patch-runscript-sapi.xsl">
        <outputproperty name="method" value="xml" />
        <outputproperty name="standalone" value="no" />
        <outputproperty name="encoding" value="UTF-8" />
        <outputproperty name="indent" value="yes" />
        <param name="sapibridgepath" expression="${basedir}/3rdparty/jsapi2.0/lib" />
    </xslt>
    <copy file="${jvxml.core.dir}/run-tmp.xml"
      tofile="${jvxml.core.dir}/run.xml" overwrite="true"/>
    <delete file="${jvxml.core.dir}/run-tmp.xml"/>
    <copy todir="${config}" overwrite="true">
      <fileset dir="${etc}">
        <include name="jsapi20-sapi-implementation.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="-macConfiguration" depends="-setup"
    if="jvxml.jsapi20.mac.use">
    <xslt in="${jvxml.core.dir}/run.xml"
      out="${jvxml.core.dir}/run-tmp.xml"
      style="${etc}/patch-runscript-sapi.xsl">
        <outputproperty name="method" value="xml" />
        <outputproperty name="standalone" value="no" />
        <outputproperty name="encoding" value="UTF-8" />
        <outputproperty name="indent" value="yes" />
        <param name="sapibridgepath" expression="${basedir}/3rdparty/jsapi2.0/lib" />
    </xslt>
    <copy file="${jvxml.core.dir}/run-tmp.xml"
      tofile="${jvxml.core.dir}/run.xml" overwrite="true"/>
    <delete file="${jvxml.core.dir}/run-tmp.xml"/>
    <copy todir="${config}" overwrite="true">
      <fileset dir="${etc}">
        <include name="jsapi20-mac-implementation.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="-configuration" depends="-setup"
    if="jvxml.jsapi20.default.use">
    <copy todir="${config}" file="${etc}/jsapi20-implementation.xml"/>
    <xslt in="${jvxml.core.dir}/run.xml"
      out="${jvxml.core.dir}/run-tmp.xml"
      style="${etc}/patch-runscript.xsl">
        <outputproperty name="method" value="xml" />
        <outputproperty name="standalone" value="no" />
        <outputproperty name="encoding" value="UTF-8" />
        <outputproperty name="indent" value="yes" />
        <param name="distpath" expression="${dist}" />
        <param name="thirdparty" expression="../${component}/3rdparty" />
    </xslt>
    <copy file="${jvxml.core.dir}/run-tmp.xml"
      tofile="${jvxml.core.dir}/run.xml" overwrite="true"/>
    <delete file="${jvxml.core.dir}/run-tmp.xml"/>
    <copy todir="${config}" overwrite="true">
      <fileset dir="${etc}">
        <include name="sphinx4.config.xml"/>
        <include name="hello.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="configuration"
    depends="-setup,-sapiConfiguration,-macConfiguration,-configuration">
  </target>

    <target name="clean" depends="-setup"
            description="Remove all compiled and distribution files">
        <delete dir="${build}" failonerror="false" />
      <delete file="${dist.jar}" failonerror="false"/>
    </target>

    <target name="compile"
            depends="-init,-checkJavaVersion"
            if="jsapi2.present"
            description="Compile the JSAPI 2.0 sources">
        <echo message="compiling ${component} with debug=${javac.debug}, optimize=${javac.optimize}" />
        <javac destdir="${build}" includeantruntime="false"
               optimize="${javac.optimize}"
               debug="${javac.debug}"
               deprecation="on">
            <src path="${src}" />
            <include name="${component.path}/**/*.java" />
            <classpath refid="project.classpath" />
            <compilerarg value="-Xlint:unchecked" />
        </javac>
    </target>

    <target name="jar"
            depends="compile"
            description="Pack all compiled files into jar files">
        <!-- jsapi 2.0 implementation jar file -->
        <jar jarfile="${dist.jar}" compress="false">
            <fileset dir="${build}">
                <include name="${component.path}/**/*.class" />
                <exclude name="${component.path}/jvxml/**/*.class" />
                <exclude name="org/jvoicexml/**/Test*.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <section name="common">
                    <attribute name="Implementation-Vendor"
                               value="JVoiceXML group" />
                    <attribute name="Implementation-Title"
                               value="JVoiceXML jsapi 2.0 base layer" />
                    <attribute name="Implementation-Version"
                        value="${version}" />
                </section>
            </manifest>
        </jar>
    </target>

    <target name="rebuild"
            description="Rebuild the jars from scratch"
            depends="clean,jar" />

    <target name="apidoc" description="create javadoc"
        depends="-setup">
        <echo message="creating javadoc with access: ${javadoc.access}" />

        <delete dir="${apidoc}" failonerror="false"/>

        <javadoc destdir="${apidoc}"
                 windowtitle="JVoiceXML"
                 author="true"
                 version="true"
                 linksource="true"
                 access="${javadoc.access}"
                 use="true">
            <packageset dir="${src}" />
            <doctitle>
                <![CDATA[JVoiceXML - a free VoiceXML interpreter]]>
            </doctitle>
            <bottom>
                <![CDATA[<i>Copyright &#169; 2005-2009<a href="http://jvoicexml.sourceforge.net">JVoiceXML group</a>.</i>]]>
            </bottom>
        <tag name="todo" description="Stuff to complete" />
        <classpath>
            <path refid="project.classpath" />
        </classpath>

        <!-- Resolve used libraries -->
        <link offline="true"
              href="http://java.sun.com/javase/6/docs/api/"
              packagelistLoc="${3rdparty.dir}" />
        <link offline="true" resolveLink="false"
              href="${jvxml.core.apidoc}"
              packagelistLoc="${apidoc.basedir}/org.jvoicexml" />
        <link offline="true" 
              href="http://logging.apache.org/log4j/docs/api/"
              packagelistLoc="${log4j.dir}" />

        <group title="JSAPI 2.0 based implementation platform">
            <package name="org.jvoicexml.implementation.jsapi20*" />
        </group>
        <group title="JSAPI 2.0 based client">
            <package name="org.jvoicexml.client.jsapi20*" />
        </group>
        </javadoc>
    </target>

  <target name="checkstyle"
    description="Check for JVoiceXML coding standard"
    depends="compile, -initcheckstyle"
    if="checkstyle.present">
    <property name="checkstyle-target.dir"
      value="${dist}/checkstyle/${component}" />
    <mkdir dir="${checkstyle-target.dir}"/>
    <property name="checkstyle.data"
      value="${checkstyle-target.dir}/checkstyle-data.xml" />
    <checkstyle config="${jvxml.core.dir}/etc/jvoicexml-checks.xml"
       failonviolation="false">
        <classpath>
          <pathelement path="${project.classpath}" />
          <pathelement location="${build}" />
        </classpath>
        <classpath refid="jvxml.core.lib"/>
        <fileset dir="${src}">
            <include name="org/jvoicexml/**/*.java" />
        </fileset>
        <formatter type="xml" tofile="${checkstyle.data}"/>
    </checkstyle>
    <xslt style="${jvxml.core.dir}/etc/checkstyle-frames.xsl"
          in="${checkstyle.data}"
          out="${checkstyle-target.dir}/report.html">
      <param name="output.dir" expression="${checkstyle-target.dir}"/>
    </xslt>
  </target>

  <target name="distribution" depends="jar">
    <property name="distFolder" value="${dist}/${jvxml.version}" />
    <copy tofile="${distFolder}/config/jsapi20-implementation.xml"
      file="${etc}/jsapi20-implementation-dist.xml"/>
    <copy tofile="${distFolder}/config/jsapi20-mac-implementation.xml"
      file="${etc}/jsapi20-mac-implementation-dist.xml"/>
    <copy tofile="${distFolder}/config/jsapi20-sapi-implementation.xml"
      file="${etc}/jsapi20-sapi-implementation-dist.xml"/>
    <copy todir="${distFolder}/config">
      <fileset dir="${etc}">
        <include name="hello.xml"/>
      </fileset>
    </copy>
    <copy todir="${distFolder}/lib"
        file="${dist}/org.jvoicexml.implementation.jsapi20.jar"/>
    <copy todir="${distFolder}/lib">
      <fileset refid="jsapi2.lib" />
      <fileset dir="${local-3rdparty.dir}/jsapi2.0/lib">
        <include name="*.jar"/>
        <include name="*.dll"/>
        <include name="*.jnilib"/>
      </fileset>
    </copy>
  </target>

</project>
