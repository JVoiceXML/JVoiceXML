buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
}

apply plugin: 'com.google.protobuf'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = JVOICEXML_GROUP
version = JVOICEXML_VERSION

sourceSets {
    main {
        proto {
            srcDir 'src/main/protobuf'
        }
        java {
            srcDir 'src/main/java'
            srcDir '${buildDir}/generated/source/proto/main/java'
        }
    }
}

checkstyle {
    configFile file("${project(':org.jvoicexml').projectDir}/src/templates/jvoicexml-checks.xml")
}

dependencies {
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.1.0'
    
    testCompile group: 'junit', name: 'junit', version: '4.13.2'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    compile project(':org.jvoicexml.client')
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    
    generateProtoTasks {
        // all() returns the collection of all protoc tasks
        all().each { task ->
            // Here you can configure the task
        }

        // In addition to all(), you may get the task collection by various
        // criteria:

        // (Java only) returns tasks for a sourceSet
        ofSourceSet('main')
    }    
}

jar {
    version = JVOICEXML_VERSION

    manifest {
        attributes("Implementation-Title": "JVoiceXML Text Client",
                   'Implementation-Vendor': 'switch',
                   'Implementation-Version': JVOICEXML_VERSION,
                   'Built-By'       : System.properties['user.name'],
                   'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                   'Created-By'     : "Gradle ${gradle.gradleVersion}",
                   'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                   'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
    baseName 'org.jvoicexml.client.text'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = tasks.jar.baseName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'JVoiceXML MMI Event library'
                description = 'JVoiceXML MMI Event library'
                url = 'https://github.com/JVoiceXML/JVoiceXML'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, Version 2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }
                developers {
                    developer {
                        id = 'schnelle'
                        name = 'Dirk Schnelle-Walka'
                        email = 'dirk.schnelle@jvoicexml.org'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:JVoiceXML/JVoiceXML.git'
                    developerConnection = 'scm:git:ssh://github.com:JVoiceXML/JVoiceXML.git'
                    url = 'https://github.com/JVoiceXML/JVoiceXML'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/" 
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = JVOICEXML_OSSRH_USERNAME
                password = JVOICEXML_OSSRH_PASSWORD
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
