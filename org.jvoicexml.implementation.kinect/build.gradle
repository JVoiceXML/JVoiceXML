import static org.apache.tools.ant.taskdefs.condition.Os.*

apply plugin: 'java'
apply plugin: "com.github.eerohele.saxon-gradle"
apply plugin: 'maven'
if (isFamily(FAMILY_WINDOWS)) {
    apply plugin: 'com.ullink.msbuild'
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath  'gradle.plugin.com.github.eerohele:saxon-gradle:0.2.1'
        classpath 'com.ullink.gradle:gradle-msbuild-plugin:3.6'
    }
}   

sourceSets {
    main {
        resources {
            exclude '**'
        }
    }
}

dependencies {
    testCompile project(':org.jvoicexml').sourceSets.test.output
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    compile project(':org.jvoicexml')
    compile project(':org.jvoicexml.client')
    
    runtime fileTree(dir: "$buildDir/jni", include: ['*.dll'])
}

xslt {
    onlyIf { 
        isFamily(FAMILY_WINDOWS)
    }
    stylesheet "${projectDir}/src/main/resources/patch-configuration.xsl"
    input "${projectDir}/src/main/resources/kinect-implementation.xml"
    output "${project(':org.jvoicexml').copyConfiguration.destinationDir}/kinect-implementation.xml"
    parameters(
        buildpath: "${buildDir}/libs",
        version: JVOICEXML_VERSION,
        libs: configurations.compile
    )
}

task xsltDistribution(type: com.github.eerohele.SaxonXsltTask) {
    onlyIf { 
        isFamily(FAMILY_WINDOWS)
    }
    stylesheet "${projectDir}/src/main/resources/patch-configuration.xsl"
    input "${projectDir}/src/main/resources/kinect-implementation.xml"
    output "${project(':main').buildDir}/config/kinect-implementation.xml"
    parameters(
        buildpath: "lib",
        version: JVOICEXML_VERSION,
        libs: configurations.compile
    )
}

task generateJniHeaders(type: Exec) {
    dependsOn classes
    
    def FileCollection classpath = files(sourceSets.main.compileClasspath,
                                         sourceSets.main.output.classesDirs) 
    def nativeIncludes = "$buildDir/include"
    
    commandLine "javah", "-d", nativeIncludes,
        "-classpath", classpath.getAsPath(),
        "org.jvoicexml.implementation.kinect.KinectRecognizer"
}

if (isFamily(FAMILY_WINDOWS)) {
    task cleanJniWin32(type: com.ullink.Msbuild) {
        dependsOn generateJniHeaders
    
        msbuildDir = JVOICEXML_IMPLEMENTATION_KINECT_MSBUILD_DIR
        solutionFile = "${projectDir}/src/main/cpp/JVoiceXmlKinectRecognizer.sln"
        projectName = "JVoiceXmlKinectRecognizer"
        targets = ['Clean']
        configuration = 'Release'
        platform = 'Win32'
        destinationDir = "$buildDir/jni"
    }

    task cleanJniWin64(type: com.ullink.Msbuild) {
        dependsOn generateJniHeaders
    
        msbuildDir = JVOICEXML_IMPLEMENTATION_KINECT_MSBUILD_DIR
        solutionFile = "${projectDir}/src/main/cpp/JVoiceXmlKinectRecognizer.sln"
        projectName = "JVoiceXmlKinectRecognizer"
        targets = ['Clean']
        configuration = 'Release'
        platform = 'x64'
        destinationDir = "$buildDir/jni"
    }
    
    task cleanJni {
        dependsOn cleanJniWin32
        dependsOn cleanJniWin64
    }
}

clean {
    if (isFamily(FAMILY_WINDOWS)) {
        dependsOn cleanJni
    }
    delete file("${project(':org.jvoicexml').copyConfiguration.destinationDir}/kinect-implementation.xml")
    delete file("${project(':org.jvoicexml').buildDir}/jni/JVoiceXmlKinectRecognizer.dll")
    delete file("${project(':org.jvoicexml').buildDir}/jni/JVoiceXmlKinectRecognizer_x64.dll")
}

if (isFamily(FAMILY_WINDOWS)) {
    task buildJniWin32(type: com.ullink.Msbuild) {
        dependsOn generateJniHeaders
    
        msbuildDir = JVOICEXML_IMPLEMENTATION_KINECT_MSBUILD_DIR
        solutionFile = "${projectDir}/src/main/cpp/JVoiceXmlKinectRecognizer.sln"
        projectName = "JVoiceXmlKinectRecognizer"
        targets = ['Build']
        configuration = 'Release'
        platform = 'Win32'
        destinationDir = "$buildDir/jni"
    }
    
    task buildJniWin64(type: com.ullink.Msbuild) {
        dependsOn generateJniHeaders
    
        msbuildDir = JVOICEXML_IMPLEMENTATION_KINECT_MSBUILD_DIR
        solutionFile = "${projectDir}/src/main/cpp/JVoiceXmlKinectRecognizer.sln"
        projectName = "JVoiceXmlKinectRecognizer"
        targets = ['Build']
        configuration = 'Release'
        platform = 'x64'
        destinationDir = "$buildDir/jni"
    }
    
    task buildJni {
        onlyIf { 
            isFamily(FAMILY_WINDOWS)
        }
    
        dependsOn buildJniWin32
        dependsOn buildJniWin64
        
        doLast {
            copy {
                from 'src/main/cpp/Release'
                into "$buildDir/jni"
                include '*.dll'
            }
    
            copy {
                from 'src/main/cpp/Release_x64'
                into "$buildDir/jni"
                include '*.dll'
            }
        }
    }
    
    task copyJNI(type: Copy) {
        dependsOn buildJni
    
        from("$buildDir/jni") {
             include '*.dll'
        }
        into "${project(':org.jvoicexml').buildDir}/jni"
    }
}

jar {
    version = JVOICEXML_VERSION

    if (isFamily(FAMILY_WINDOWS)) {
        dependsOn xslt
        dependsOn xsltDistribution
        dependsOn copyJNI
    }

    manifest {
        attributes("Implementation-Title": "JVoiceXML Kinect implementation platform",
                   'Implementation-Vendor': 'switch',
                   'Implementation-Version': JVOICEXML_VERSION,
                   'Built-By'       : System.properties['user.name'],
                   'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                   'Created-By'     : "Gradle ${gradle.gradleVersion}",
                   'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                   'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
    baseName 'org.jvoicexml.implementation.kinect'
}

install {
    onlyIf { 
        isFamily(FAMILY_WINDOWS)
    }
    version = JVOICEXML_VERSION
    group = JVOICEXML_GROUP
}
