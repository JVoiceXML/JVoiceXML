<project name="org.jvoicexml.xml" default="jar" basedir=".">
    <description>
This file builds the XML library of JVoiceXML.
To override the current settings follow the instructions given in
personal-props/README.txt
  </description>

    <!-- allow the user to override setting in an own propertiesfile. -->
    <property file="../org.jvoicexml/personal-props/ant.properties" />
    <property file="../org.jvoicexml/config-props/ant.properties" />

    <!-- Load the settings for 3rdparty libraries -->
    <import file="3rdparty-libs.xml" />

    <target name="-setup" depends="-local-3rdparty-setup">
        <!-- The component built here-->
        <property name="component" value="org.jvoicexml.xml"/>

        <!-- directory structure -->
        <property name="src" value="src" />
        <property name="build" value="classes" />
        <property name="dist" value="../org.jvoicexml/dist" />
        <property name="etc" value="etc" />
        <property name="apidoc" value="${apidoc.basedir}/${component}" />

        <!-- main jar files -->
        <property name="dist.jar" value="${dist}/${component}.jar" />

        <!-- the class path for 3rdparty libraries -->
        <path id="project.classpath">
        </path>
    </target>

    <target name="-checkJavaVersion">
        <!-- Check if at least java 6 is used. -->
        <condition property="version1.6">
            <or>
                <equals arg1="1.6" arg2="${ant.java.version}" />
                <equals arg1="1.7" arg2="${ant.java.version}" />
            </or>
        </condition>

        <fail unless="version1.6">
You need at least java version 1.6 to compile this project.
You are using ${ant.java.version}.
    </fail>
    </target>

    <target name="-init" depends="-setup">
        <!-- Create build directories -->
        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />
    </target>


	<target name="clean" depends="-setup"
            description="Remove all compiled and distribution files">
        <echo message="cleaning ${component}" />
        <delete dir="${build}" failonerror="false" />
		<delete file="${dist.jar}" failonerror="false" />
    </target>

    <target name="compile"
            depends="-init,-checkJavaVersion"
            description="Compile the core JAVA sources">
        <echo message="compiling ${component} with debug=${javac.debug}, optimize=${javac.optimize}" />
        <javac destdir="${build}" includeantruntime="false"
               optimize="${javac.optimize}"
               debug="${javac.debug}"
               deprecation="on"
               source="${javac.source}"
               target="${javac.target}">
            <src path="${src}" />
            <exclude name="**/package-info.java" />
            <classpath refid="project.classpath" />
            <compilerarg value="-Xlint:unchecked" />
        </javac>
    </target>

    <target name="jar"
            depends="compile"
            description="Pack all compiled files into jar files">
        <!-- xml jar file -->
        <jar jarfile="${dist.jar}" compress="false">
            <fileset dir="${build}">
                <include name="org/jvoicexml/xml/**/*.class" />
                <exclude name="org/jvoicexml/**/Test*.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <section name="common">
                    <attribute name="Implementation-Vendor"
                               value="JVoiceXML group" />
                    <attribute name="Implementation-Title"
                               value="JVoiceXML xml library" />
                    <attribute name="Implementation-Version"
                        value="${version}" />
                </section>
            </manifest>
            <metainf prefix="META-INF/services"
                file="${etc}/services/org.jvoicexml.xml.srgs.GrammarTypeFactory"/>
        </jar>
    </target>

    <target name="rebuild"
            description="Rebuild the jars from scratch"
            depends="clean,jar" />



	<target name="apidoc" depends="-setup">
        <echo message="creating javadoc with access: ${javadoc.access}" />
        <delete dir="${apidoc}" />
        <javadoc destdir="${apidoc}"
                 windowtitle="JVoiceXML XML Library"
                 author="true"
                 version="true"
                 linksource="true"
                 access="${javadoc.access}"
                 use="true">
            <packageset dir="${src}" />
            <classpath refid="project.classpath" />
            <doctitle>
                <![CDATA[JVoiceXML - a free VoiceXML interpreter]]>
            </doctitle>
            <bottom>
                <![CDATA[<i>Copyright &#169; 2005-2009<a href="http://jvoicexml.sourceforge.net">JVoiceXML group</a>.</i>]]>
            </bottom>
        <!-- Custom tags -->
        <tag name="todo" description="Stuff to complete" />
        <tag name="created" description="Creation date" />
        <tag name="updated" description="Update date" />

        <!-- Resolve used libraries -->
        <link offline="true"
              href="http://java.sun.com/javase/6/docs/api/"
              packagelistLoc="${3rdparty.dir}" />

        <!-- Group definitions -->
        <group title="Parsing and creation of VoiceXML documents">
            <package name="org.jvoicexml.xml*" />
        </group>
        </javadoc>
    </target>

    <target name="checkstyle"
      description="Check for JVoiceXML coding standard"
      depends="compile, -initcheckstyle"
      if="checkstyle.present">
      <property name="checkstyle-target.dir"
        value="${dist}/checkstyle/${component}" />
      <mkdir dir="${checkstyle-target.dir}"/>
      <property name="checkstyle.data"
        value="${checkstyle-target.dir}/checkstyle-data.xml" />
      <checkstyle config="${jvxml.core.dir}/etc/jvoicexml-checks.xml"
         failonviolation="false">
          <classpath path="${project.classpath}"/>
          <classpath location="${build}"/>
          <fileset dir="${src}">
              <include name="org/jvoicexml/**/*.java" />
          </fileset>
          <formatter type="xml" tofile="${checkstyle.data}"/>
      </checkstyle>
      <xslt style="${jvxml.core.dir}/etc/checkstyle-frames.xsl"
            in="${checkstyle.data}"
            out="${checkstyle-target.dir}/report.html">
        <param name="output.dir" expression="${checkstyle-target.dir}"/>
      </xslt>
    </target>
</project>
