<project name="JVoiceXML" default="run" basedir=".">
    <description>
This file builds JVoiceXML.
To override the current settings, create a file jvoicexml.properties containing
your local settings.
If you don't have a jvoicexml.properties file, the default values from
this buildfile are taken.
    </description>

    <!-- allow the user to override setting in an own propertiesfile. -->
    <property file="jvoicexml.properties"/>

    <!-- directory structure -->
    <property name="src" value="src" />
    <property name="build" value="classes" />
    <property name="dist" value="dist" />
    <property name="apidoc" value="doc/api" />
    <property name="config" value="config" />
    <property name="etc" value="etc" />

    <condition property="windows">
        <os family="windows"/>
    </condition>

    <!-- main jar files -->
    <property name="dist.jvxml.jar" value="${dist}/jvxml.jar" />
    <property name="dist.xml.jar" value="${dist}/jvxml-xml.jar" />
    <property name="dist.implementation.jsapi10.jar" value="${dist}/jvxml-jsapi1.0.jar" />
    <property name="dist.implementation.jsapi10.jvxml.jar" value="${dist}/jvxml-jsapi1.0-impl.jar" />
    <property name="dist.client.jar" value="${dist}/jvxml-client.jar" />

    <!-- distribution files -->
    <property name="version" value="0.5.1" />

    <property name="dist.zip" value="jvxml-${version}.zip" />
    <property name="dist.src.zip" value="jvxml-src-${version}.zip" />
    <property name="dist.install.jar" value="jvxml-install-${version}.jar" />

    <!-- Load the settings for 3rdparty libraries -->
    <import file="3rdparty-libs.xml" />

    <!-- the class path for 3rdparty libraries -->
    <path id="project.classpath">
        <fileset refid="log4j.lib"/>
        <fileset refid="jsapi.lib"/>
        <fileset refid="freetts.lib" />
        <fileset refid="sphinx.lib" />
        <fileset refid="rhino.lib" />
        <fileset refid="spring.lib" />
        <fileset refid="pool.lib" />
    </path>

    <target name="-checkJSAPI">
        <!-- Check if the jsapi library has been unpacked into the right
        directory. -->
        <available file="${jsapi.lib.dir}/jsapi.jar" property="jsapi.present"/>
        <fail unless="jsapi.present">
Cannot find ${jsapi.lib.dir}/jsapi.jar, which is needed to build JVoiceXML.
See the 'How to build JVoiceXML' documentation for information on setting up
your environment to use JSAPI.
        </fail>
    </target>

    <target name="-checkJavaVersion">
        <!-- Check if at least java 5 is used. -->
        <condition property="version1.5">
            <equals arg1="1.5" arg2="${ant.java.version}"/>
        </condition>

        <fail unless="version1.5">
You need java version 1.5 to complie this project.
You're using ${ant.java.version}
        </fail>
    </target>

    <target name="-init">
        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />

        <!-- create the folder for the distribution files. -->
        <property name="distFolder" value="${dist}/${version}"/>
        <mkdir dir="${distFolder}" />
    </target>

    <target name="-distinit" depends="-init">
        <!-- javadoc switches -->
        <property name="access" value="protected" />

        <!-- compiler switches -->
        <property name="optimize" value="on" />
        <property name="debug" value="off" />

        <property name="distribution" value="true" />
    </target>

    <target name="-initdocs" unless="distribution">
        <property name="access" value="private" />
    </target>

    <target name="-initcompile" unless="distribution">
        <property name="optimize" value="off" />
        <property name="debug" value="on" />
    </target>

    <target name="clean"
        description="Remove all compiled and distribution files">
        <delete dir="${build}" />
        <delete file="${dist.jvxml.jar}" />
        <delete file="${dist.xml.jar}" />
        <delete file="${dist.implementation.jar}" />
    </target>

    <target name="compile"
        depends="-init, -initcompile, -checkJSAPI, -checkJavaVersion"
        description="Compile the JAVA sources">
        <echo message="compiling with debug=${debug}, optimize=${optimize}" />
        <javac destdir="${build}"
            optimize="${optimize}" debug="${debug}" deprecation="on"
            encoding="iso-8859-1">
            <src path="${src}" />
            <include name="org/jvoicexml/**/*.java" />
            <classpath refid="project.classpath" />
            <compilerarg value="-Xlint:unchecked" />
        </javac>
    </target>

    <target name="jar" depends="compile"
        description="Pack all compiled files into jar files">

        <!-- main jar file -->
        <jar jarfile="${dist.jvxml.jar}" compress="false">
            <fileset dir="${build}">
                <include name="org/jvoicexml/**/*.class" />
                <exclude name="org/jvoicexml/**/Test*.class" />
                <exclude name="org/jvoicexml/xml/**" />
                <exclude name="org/jvoicexml/implementation/jsapi10/**" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <section name="common">
                    <attribute name="Implementation-Vendor"
                               value="JVoiceXML group"/>
                    <attribute name="Implementation-Title"
                               value="JVoiceXML main"/>
                </section>
            </manifest>
        </jar>

        <!-- xml jar file -->
        <jar jarfile="${dist.xml.jar}" compress="false" >
            <fileset dir="${build}">
                <include name="org/jvoicexml/xml/**/*.class" />
                <exclude name="org/jvoicexml/**/Test*.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <section name="common">
                    <attribute name="Implementation-Vendor"
                               value="JVoiceXML group"/>
                    <attribute name="Implementation-Title"
                               value="JVoiceXML xml library"/>
                </section>
            </manifest>
        </jar>

        <!-- jsapi 1.0 implementation jar file -->
        <jar jarfile="${dist.implementation.jsapi10.jar}" compress="false">
            <fileset dir="${build}">
                <include name="org/jvoicexml/implementation/jsapi10/**/*.class" />
                <exclude name="org/jvoicexml/**/Test*.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <section name="common">
                    <attribute name="Implementation-Vendor"
                               value="JVoiceXML group"/>
                    <attribute name="Implementation-Title"
                               value="JVoiceXML jsapi 1.0 base layer"/>
                </section>
            </manifest>
        </jar>

        <!-- jsapi 1.0 demo implementation jar file -->
        <jar jarfile="${dist.implementation.jsapi10.jvxml.jar}"
             compress="false">
            <fileset dir="${build}">
                <include name="org/jvoicexml/implementation/jsapi10/jvxml/**/*.class" />
                <exclude name="org/jvoicexml/**/Test*.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <section name="common">
                    <attribute name="Implementation-Vendor"
                               value="JVoiceXML group"/>
                    <attribute name="Implementation-Title"
                               value="JVoiceXML jsapi 1.0 demo implementation"/>
                </section>
            </manifest>
        </jar>

        <!-- client jar file -->
        <jar jarfile="${dist.client.jar}" compress="false">
            <fileset dir="${build}">
                <include name="org/jvoicexml/JVoiceXml.class" />
                <include name="org/jvoicexml/Session.class" />
                <include name="org/jvoicexml/Application.class" />
                <include name="org/jvoicexml/ApplicationRegistry.class" />
                <include name="org/jvoicexml/event/**/*.class" />
                <include name="org/jvoicexml/jndi/JVoiceXmlObjectFactory.class" />
                <include name="org/jvoicexml/jndi/*Stub.class" />
                <include name="org/jvoicexml/jndi/Remote*.class" />
                <include name="org/jvoicexml/implementation/CallControl.class" />
                <include name="org/jvoicexml/implementation/InputDevice.class" />
                <include name="org/jvoicexml/implementation/CharacterInput.class" />
                <include name="org/jvoicexml/implementation/UserInputListener.class" />
                <include name="org/jvoicexml/implementation/ExternalResource.class" />
                <include name="org/jvoicexml/documentserver/schemestrategy/MappedDocumentRepository.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <section name="common">
                    <attribute name="Implementation-Vendor"
                    value="JVoiceXML group"/>
                    <attribute name="Implementation-Title"
                    value="JVoiceXML client files"/>
                </section>
            </manifest>
        </jar>
    </target>

    <target name="apidoc" description="create javadoc" depends="-initdocs">
        <echo message="creating javadoc with access: ${access}" />

        <delete dir="${apidoc}" />

        <javadoc destdir="${apidoc}"
            windowtitle="JVoiceXML" author="true" version="true"
            access="${access}" use="true">
            <packageset dir="src" />
            <doctitle ><![CDATA[JVoiceXML - a free VoiceXML interpreter]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2005-2006 <a href="http://jvoicexml.sourceforge.net">JVoiceXML group</a>.</i>]]></bottom>
            <tag name="todo" description="Stuff to complete" />
            <classpath refid="project.classpath" />
            <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/"
                packagelistLoc="${3rdparty.dir}"/>
            <link offline="true"
                href="http://www.mozilla.org/rhino/apidocs/"
                packagelistLoc="${rhino.dir}"/>
            <link offline="true"
                href="http://java.sun.com/products/java-media/speech/forDevelopers/jsapi-doc/"
                packagelistLoc="${jsapi.dir}"/>
            <link offline="true"
                href="http://logging.apache.org/log4j/docs/api/"
                packagelistLoc="${log4j.dir}"/>
            <link offline="true"
                href="http://www.springframework.org/api"
                packagelistLoc="${spring.dir}"/>

            <group title="Parsing and creation of VoiceXML documents">
                <package name="org.jvoicexml.xml*" />
            </group>
            <group title="Implementation platform">
                <package name="org.jvoicexml.implementation*" />
            </group>
            <group title="Document Server">
                <package name="org.jvoicexml.documentserver*" />
            </group>
            <group title="Events">
                <package name="org.jvoicexml.event*" />
            </group>
            <group title="Logging support">
                <package name="org.jvoicexml.logging*" />
            </group>
            <group title="Configuration">
                <package name="org.jvoicexml.config*" />
            </group>
            <group title="Applications">
                <package name="org.jvoicexml.application*" />
            </group>
            <group title="Main package containing the VoiceXML interpreter">
                <package name="org.jvoicexml.interpreter*" />
            </group>
            <group title="JNDI support">
                <package name="org.jvoicexml.jndi*" />
            </group>
        </javadoc>
    </target>

    <target name="-prepareAdditionalFiles">
        <copy file="AUTHORS" tofile="AUTHORS.txt"/>
        <copy file="COPYING" tofile="COPYING.txt"/>
        <copy file="INSTALL" tofile="INSTALL.txt"/>
        <copy file="README" tofile="README.txt"/>
        <copy file="ChangeLog" tofile="ChangeLog.txt"/>

        <fileset dir="." id="dist.files.additional.dos">
            <include name="AUTHORS.txt"/>
            <include name="COPYING.txt"/>
            <include name="INSTALL.txt"/>
            <include name="README.txt"/>
            <include name="ChangeLog.txt"/>
        </fileset>

        <apply executable="unix2dos">
            <fileset refid="dist.files.additional.dos"/>
        </apply>

        <fileset dir="." id="dist.files.additional">
            <include name="AUTHORS"/>
            <include name="COPYING"/>
            <include name="INSTALL"/>
            <include name="README"/>
            <include name="ChangeLog"/>
        </fileset>
    </target>

    <target name="-prepareDistributionFolder"
            depends="jar,-prepareAdditionalFiles"
            description="copy all files for the binary distribution">
        <mkdir dir="${distFolder}/bin" />

        <copy todir="${distFolder}">
            <fileset refid="dist.files.additional"/>
            <fileset refid="dist.files.additional.dos"/>
        </copy>

        <copy todir="${distFolder}/bin">
            <fileset dir="${etc}">
                <include name="**/*.sh"/>
                <include name="**/*.bat"/>
            </fileset>
        </copy>

        <mkdir dir="${distFolder}/config" />

        <copy todir="${distFolder}/config">
            <fileset dir="${config}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
                <include name="**/*.gram"/>
            </fileset>
        </copy>

        <mkdir dir="${distFolder}/lib" />

        <copy todir="${distFolder}/lib">
            <fileset refid="log4j.lib"/>
            <fileset refid="jsapi.lib"/>
            <fileset refid="freetts.lib" />
            <fileset refid="sphinx.lib" />
            <fileset refid="loggings.lib" />
            <fileset refid="rhino.lib" />
            <fileset refid="spring.lib" />
            <fileset refid="pool.lib" />
        </copy>
        <copy todir="${distFolder}/lib" file="${dist.jvxml.jar}"/>
        <copy todir="${distFolder}/lib" file="${dist.client.jar}"/>
        <copy todir="${distFolder}/lib" file="${dist.xml.jar}"/>
        <copy todir="${distFolder}/lib" file="${dist.implementation.jsapi10.jar}"/>
        <copy todir="${distFolder}/lib" file="${dist.implementation.jsapi10.jvxml.jar}"/>
    </target>

    <target name="-jsmooth" depends="-prepareDistributionFolder" if="windows"
            description="Create windows exe wrappers for the main processes">
        <!-- checkstyle library -->
        <property name="jsmooth.dir" value="${3rdparty.dir}/jsmooth0.9.7"/>
        <property name="jsmooth.lib.dir" value="${jsmooth.dir}/lib"/>

        <taskdef classname="net.charabia.jsmoothgen.ant.JSmoothGen"
            name="jsmoothgen">
            <classpath>
                <fileset dir="${jsmooth.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <copy todir="${distFolder}/bin">
            <fileset dir="${jsmooth.dir}">
                <include name="*.jsmooth"/>
            </fileset>
        </copy>

        <jsmoothgen project="${distFolder}/bin/jvoicexml.jsmooth"
                    skeletonroot="${jsmooth.dir}"/>
        <jsmoothgen project="${distFolder}/bin/shutdown.jsmooth"
                    skeletonroot="${jsmooth.dir}"/>

        <delete>
            <fileset dir="${distFolder}/bin">
                <include name="*.jsmooth"/>
            </fileset>
        </delete>
    </target>

    <target name="distributionFolder"
            depends="-prepareDistributionFolder, -jsmooth"
            description="collect all files for the binary distribution">
    </target>

    <target name="-checkIzpack">
        <!-- izpack library -->
        <property name="izpack.dir" value="${3rdparty.dir}/izpack3.8.1"/>
        <property name="izpack.lib.dir" value="${izpack.dir}/lib"/>

        <path id="izpack.path">
            <fileset dir="${izpack.lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </path>

        <condition property="izpack.present">
            <and>
                <available file="${izpack.lib.dir}" type="dir"/>

                <available classpathref="izpack.path"
                           classname="com.izforge.izpack.ant.IzPackTask" />
            </and>
        </condition>
    </target>

    <target name="-izpack" description="Build the installer"
        depends="-checkIzpack, clean, -distinit, apidoc, distributionFolder"
        if="izpack.present">
        <taskdef classname="com.izforge.izpack.ant.IzPackTask"
            name="izpack">
            <classpath refid="izpack.path"/>
        </taskdef>

        <izpack input="${etc}/install.xml"
                output="${dist.install.jar}"
                installerType="standard"
                basedir="${distFolder}"/>
    </target>

    <target name="distribution" description="Build the distribution files"
        depends="-izpack">
        <!-- Compress the source files into a zip archive -->
        <zip basedir="." destfile="${dist.src.zip}" compress="true">
            <include name="3rdparty-libs.xml"/>
            <include name="build.xml"/>
            <fileset refid="dist.files.additional"/>
            <fileset refid="dist.files.additional.dos"/>
            <include name="src/**/*.java"/>
        </zip>

        <!-- Compress the installer into a zip archive -->
        <zip basedir="." destfile="${dist.zip}" compress="true">
            <include name="${dist.install.jar}"/>
            <fileset refid="dist.files.additional"/>
            <fileset refid="dist.files.additional.dos"/>
        </zip>
    </target>

    <target name="copyRpmFiles" description="Copy all files for the RPM"
            depends="-init,apidoc">
        <property name="rpm.build" value="/var/tmp/jvoicexml-${version}"/>

        <delete dir="${rpm.build}" />
        <mkdir dir="${rpm.build}/usr/local/jvoicexml" />

        <copy todir="${rpm.build}/usr/local/jvoicexml">
            <fileset dir="${distFolder}">
                <exclude name="**/*.txt"/>
            </fileset>
        </copy>

        <mkdir dir="${rpm.build}/usr/local/jvoicexml/demo" />
        <copy todir="${rpm.build}/usr/local/jvoicexml/demo">
            <fileset dir="demo">
                <include name="**/*.java"/>
                <include name="**/*.gram" />
                <include name="**/*.vxml" />
                <include name="**/build.xml" />
                <include name="**/config/**" />
                <include name="**/metadata/**" />
            </fileset>
        </copy>

        <mkdir dir="${rpm.build}/usr/local/jvoicexml/doc/api" />
        <copy todir="${rpm.build}/usr/local/jvoicexml/doc/api">
            <fileset dir="${apidoc}" />
        </copy>
    </target>

    <target name="rpm" depends="clean,-distinit,-prepareDistributionFolder,copyRpmFiles"
        description="Create the RPM">
        <mkdir dir="${etc}/BUILD"/>
        <mkdir dir="${etc}/RPMS"/>
        <rpm topdir="${etc}" specFile="jvoicexml.spec"
        command="--target noarch -bb"/>
    </target>

    <target name="-checkCheckstyle">
        <!-- checkstyl library -->
        <property name="checkstyle.dir" value="${3rdparty.dir}/checkstyle4.2"/>
        <property name="checkstyle.lib.dir" value="${checkstyle.dir}/lib"/>

        <path id="checkstyle.path">
            <fileset dir="${checkstyle.lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </path>

        <condition property="checkstyle.present">
            <and>
                <available file="${checkstyle.lib.dir}" type="dir"/>

                <available classpathref="checkstyle.path"
                  classname="com.puppycrawl.tools.checkstyle.CheckStyleTask" />
            </and>
        </condition>
    </target>

    <target name="checkstyle" description="Check for JVoiceXML coding standard"
        depends="compile, -checkCheckstyle">
        <!-- checkstyle library -->
        <property name="checkstyle.dir" value="${3rdparty.dir}/checkstyle4.1"/>
        <property name="checkstyle.lib.dir" value="${checkstyle.dir}/lib"/>

        <taskdef classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"
            name="checkstyle">
            <classpath refid="checkstyle.path"/>
            <classpath>
                <fileset refid="loggings.lib" />
                <pathelement location="${checkstyle.lib.dir}/checkstyle-4.1.jar"/>
            </classpath>
        </taskdef>

        <checkstyle config="${etc}/sun_checks.xml">
            <classpath >
                <pathelement path="${project.classpath}"/>
                <pathelement location="${build}"/>
            </classpath>
            <fileset dir="${src}">
                <include name="org/jvoicexml/**/*.java" />
            </fileset>
        </checkstyle>
    </target>

    <target name="run" description="Run the VoiceXML interpreter"
            depends="jar">
        <copy todir="${build}">
            <fileset dir="${config}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
                <include name="**/*.gram"/>
            </fileset>
        </copy>

        <java classname="org.jvoicexml.JVoiceXmlMain" fork="true"
              maxmemory="256m">
            <classpath>
                <path refid="project.classpath" />
                <fileset refid="loggings.lib" />
                <pathelement path="${build}"/>
            </classpath>
        </java>
    </target>
</project>
