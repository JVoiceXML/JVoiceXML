buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'java-test-fixtures'
    id 'com.github.eerohele.saxon-gradle' version '0.8.0'
    id 'signing'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = JVOICEXML_GROUP
version = JVOICEXML_VERSION

configurations {
	jvxmlConfiguration
    testArtifacts
}

def jvxmlConfigurationDir = "${projectDir}/src/main/config"

dependencies {
	jvxmlConfiguration fileTree(jvxmlConfigurationDir)
    testArtifacts sourceSets.test.output
    
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.15.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.15.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.15.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.15.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.15.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.3'
    compile group: 'org.mozilla', name: 'rhino', version: '1.7R4'
    compile group: 'net.sourceforge.jchardet', name: 'jchardet', version: '1.0'
    compile group: 'commons-pool', name: 'commons-pool', version: '1.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
    
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    compile project(':org.jvoicexml.xml')
}

task copyConfiguration(type: Copy) {
    from configurations.jvxmlConfiguration.files
    into "$buildDir/config"
}

task enableLog4jRemoteAppender(type: com.github.eerohele.SaxonXsltTask) {
    onlyIf { 
        project.property('JVOICEXML_ENABLE_REMOTE_LOGGING') == 'true'
    }
    dependsOn copyConfiguration
    stylesheet "${jvxmlConfigurationDir}/patch-log4j2.xsl"
    input "${buildDir}/config/log4j2.xml"
    output "$buildDir/config/log4j2-remote.xml"
}

task renameLog4jRemoteAppender(type: Copy) {
    onlyIf { 
        project.property('JVOICEXML_ENABLE_REMOTE_LOGGING') == 'true'
    }
    dependsOn enableLog4jRemoteAppender
    from ("$buildDir/config")
    include 'log4j2-remote.xml'
    destinationDir file("$buildDir/config")
    rename 'log4j2-remote.xml', "log4j2.xml"
}

task copyConfigurationDistribution(type: Copy) {
    from configurations.jvxmlConfiguration.files
    into "${project(':main').buildDir}/config"
}

task enableLog4jRemoteAppenderDistribution(type: com.github.eerohele.SaxonXsltTask) {
    dependsOn copyConfigurationDistribution
    stylesheet "${jvxmlConfigurationDir}/patch-log4j2.xsl"
    input "${project(':main').buildDir}/config/log4j2.xml"
    output "${project(':main').buildDir}/config/log4j2-remote.xml"
}

task createVersionFile() {
    doLast {
        def file = new File("${sourceSets.main.output.resourcesDir}/jvoicexml.version")
        file.createNewFile()
        file.text = "jvxml.version=${JVOICEXML_VERSION}"
    }
}

jar {
    version = JVOICEXML_VERSION

    dependsOn createVersionFile
    dependsOn renameLog4jRemoteAppender
    dependsOn enableLog4jRemoteAppenderDistribution

    manifest {
        attributes('Implementation-Title': 'JVoiceXML core library',
                   'Implementation-Vendor': 'switch',
                   'Implementation-Version': JVOICEXML_VERSION,
                   'Built-By'       : System.properties['user.name'],
                   'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                   'Created-By'     : "Gradle ${gradle.gradleVersion}",
                   'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                   'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
    baseName 'org.jvoicexml'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = tasks.jar.baseName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'JVoiceXML core library'
                description = 'JVoiceXML core library'
                url = 'https://github.com/JVoiceXML/JVoiceXML'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, Version 2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }
                developers {
                    developer {
                        id = 'schnelle'
                        name = 'Dirk Schnelle-Walka'
                        email = 'dirk.schnelle@jvoicexml.org'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:JVoiceXML/JVoiceXML.git'
                    developerConnection = 'scm:git:ssh://github.com:JVoiceXML/JVoiceXML.git'
                    url = 'https://github.com/JVoiceXML/JVoiceXML'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/" 
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = JVOICEXML_OSSRH_USERNAME
                password = JVOICEXML_OSSRH_PASSWORD
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

