apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'distribution'

distributions {
    custom {}
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

configurations {
    jvxmlInterpreterDatamodelECMAScript {
        description = "ECMAScript data model"
        extendsFrom compile
    }

    jvxmlInterpreterGrammarLUIS {
        description = "LUIS grammar support"
        extendsFrom compile
    }

    jvxmlInterpreterGrammarRegex {
        description = "Regex grammar support"
        extendsFrom compile
    }

    jvxmlImplementationJSAPI10 {
        description = "support for the JSAPI 1.0 implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationJSAPI20 {
        description = "support for the JSAPI 2.0 implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationJTAPI {
        description = "support for the JTAPI implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationKinect {
        description = "support for the Kinect implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationLightweightBML {
        description = "support for the lightweight BML implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationMarc {
        description = "support for the MARC implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationMary {
        description = "support for the Open Mary implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationMMI {
        description = "support for the W3C MMI architecture"
        extendsFrom compile
    }

    jvxmlImplementationMrcpv2 {
        description = "support for the MRCPv2 implementation platform"
        extendsFrom compile
    }

    jvxmlImplementationText {
        description = "support for the text implementation platform"
        extendsFrom compile
    }
    
    jvxmlVoiceXMLUnit {
        description = "VoiceXML Unit Testing"
        extendsFrom compile
    }
    
    jvxmlJNDI {
        description = "JVoiceXML JNDI support"
        extendsFrom compile
    }

    jvxmlProfileVXML21 {
        description = "VoiceXML 2.1 Profile"
        extendsFrom compile
    }

    jvxmlProfileMMI {
        description = "VoiceXML MMI Profile"
        extendsFrom compile
    }
    jvxmlProfileMMIHTTP {
        description = "VoiceXML MMI Profile with an HTTP ETL"
        extendsFrom compile
    }
    jvxmlProfileMMISocket {
        description = "VoiceXML MMI Profile with a Socket ETL"
        extendsFrom compile
    }
    jvxmlProfileMMIuMundo {
        description = "VoiceXML MMI Profile with a uMundo ETL"
        extendsFrom compile
    }
}

dependencies {
    compile project(':org.jvoicexml.client')

    jvxmlImplementationJSAPI10 project(':org.jvoicexml.implementation.jsapi10')

    jvxmlImplementationJSAPI20 project(':org.jvoicexml.implementation.jsapi20')

    jvxmlImplementationJTAPI project(':org.jvoicexml.implementation.jtapi')

    jvxmlImplementationKinect project(':org.jvoicexml.implementation.kinect')

    jvxmlImplementationLightweightBML project(':org.jvoicexml.implementation.lightweightbml')
    jvxmlImplementationLightweightBML project(':org.jvoicexml.talkinghead')

    jvxmlImplementationMarc project(':org.jvoicexml.implementation.marc')

    jvxmlImplementationMary project(':org.jvoicexml.implementation.mary')

    jvxmlImplementationMrcpv2 project(':org.jvoicexml.interpreter.grammar.halef')
    jvxmlImplementationMrcpv2 project(':org.jvoicexml.implementation.mrcpv2')
    jvxmlImplementationMrcpv2 project(':org.jvoicexml.callmanager.sip')

    jvxmlImplementationText project(':org.jvoicexml.client.text')
    jvxmlImplementationText project(':org.jvoicexml.implementation.text')
    jvxmlImplementationText project(':org.jvoicexml.callmanager.text')

    jvxmlInterpreterDatamodelECMAScript project(':org.jvoicexml.interpreter.datamodel.ecmascript')

    jvxmlInterpreterGrammarLUIS project(':org.jvoicexml.interpreter.grammar.luis')

    jvxmlInterpreterGrammarRegex project(':org.jvoicexml.interpreter.grammar.regex')

    jvxmlJNDI project(':org.jvoicexml.jndi')

    jvxmlVoiceXMLUnit project(':org.jvoicexml.voicexmlunit')
    
    jvxmlProfileVXML21 project(':org.jvoicexml.profile.vxml21')

    jvxmlProfileMMI project(':org.jvoicexml.mmi.events')
    jvxmlProfileMMI project(':org.jvoicexml.profile.mmi')
    jvxmlProfileMMI project(':org.jvoicexml.callmanager.mmi')
    jvxmlProfileMMI project(':org.jvoicexml.callmanager.mmi.servlet')
    jvxmlProfileMMIHTTP project(':org.jvoicexml.callmanager.mmi.http')
    jvxmlProfileMMISocket project(':org.jvoicexml.callmanager.mmi.socket')
    jvxmlProfileMMIuMundo project(':org.jvoicexml.callmanager.mmi.umundo')
    
    runtime project(':org.jvoicexml.xml')
    runtime project(':org.jvoicexml')
    runtime project(':org.jvoicexml.config')
    runtime project(':org.jvoicexml.srgs')
}

clean {
    dependsOn ':org.jvoicexml:clean'
}


jar {
    onlyIf { 
        false
    }
}

task jvxmlConfigurations {
    dependsOn configurations.jvxmlJNDI

    dependsOn configurations.jvxmlInterpreterDatamodelECMAScript
    if (project.property('org_jvoicexml_interpreter_grammar_luis') == 'true') {
        dependsOn configurations.jvxmlInterpreterGrammarLUIS
    }

    if (project.property('org_jvoicexml_implementation_jsapi20') == 'true') {
        dependsOn configurations.jvxmlImplementationJSAPI20 
    }
    if (project.property('org_jvoicexml_implementation_mary') == 'true') {
        dependsOn configurations.jvxmlImplementationMary
    }
    if (project.property('org_jvoicexml_implementation_mrcpv2') == 'true') {
        dependsOn configurations.jvxmlImplementationMrcpv2
        }
    if (project.property('org_jvoicexml_implementation_text') == 'true') {
        dependsOn configurations.jvxmlImplementationText
    }
    
    if (project.property('org_jvoicexml_profile_vxml21') == 'true') {
        dependsOn configurations.jvxmlProfileVXML21
    }
    if (project.property('org_jvoicexml_profile_mmi') == 'true') {
        dependsOn configurations.jvxmlProfileMMI
        if (project.property('org.jvoicexml.callmanager.mmi.http') == 'true') {
            dependsOn configurations.jvxmlProfileMMIHTTP
        }
        if (project.property('org.jvoicexml.callmanager.mmi.socket') == 'true') {
            dependsOn configurations.jvxmlProfileMMISocket
        }
        if (project.property('org.jvoicexml.callmanager.mmi.umundo') == 'true') {
            dependsOn configurations.jvxmlProfileMMIuMundo
        }
    }
}


task jvxmlServlet(dependsOn: ':org.jvoicexml.callmanager.mmi.servlet:war') {
    doLast {
        applicationDistribution.into("servlets") {
            from(project(':org.jvoicexml.callmanager.mmi.servlet').war.outputs.files)
        }
    }
}

distributions {
    main {
        baseName 'jvoicexml'
        version = JVOICEXML_VERSION
        
        contents {
            into ('lib') {
                from configurations.jvxmlJNDI
            
                from configurations.jvxmlInterpreterDatamodelECMAScript
                from configurations.jvxmlInterpreterGrammarLUIS
                from configurations.jvxmlImplementationJSAPI10 
                from configurations.jvxmlImplementationJSAPI20 
                from configurations.jvxmlImplementationKinect 
                from configurations.jvxmlImplementationMary
                from configurations.jvxmlImplementationMrcpv2
                from configurations.jvxmlImplementationText

                from configurations.jvxmlVoiceXMLUnit
            
                from configurations.jvxmlProfileVXML21
                from configurations.jvxmlProfileMMI
                from configurations.jvxmlProfileMMIHTTP
                from configurations.jvxmlProfileMMISocket
                from configurations.jvxmlProfileMMIuMundo
                
                from("${project(':org.jvoicexml').buildDir}/jni")
            }
            
            into('config') { 
                from("${buildDir}/config") {
                    exclude "**/kinect-implementation.xml",
                        "**/mmi-callmanager-umundo.xml",
                        "**/jsapi10-talking-java-implementation.xml",
                        "**/jsapi20-sapi-implementation.xml",
                        "**/jtapi-implementation.xml",
                        "**/sip-callmanager.xml"
                }
            }

            into('config/disabled') { 
                from("${buildDir}/config") {
                    include "**/kinect-implementation.xml",
                        "**/mmi-callmanager-umundo.xml",
                        "**/jsapi10-talking-java-implementation.xml",
                        "**/jsapi20-sapi-implementation.xml",
                        "**/jtapi-implementation.xml",
                        "**/sip-callmanager.xml"
                }
            }
            
            from(jvxmlServlet) {
                into "servlets"
            }
            
            into('doc') {
                from("${project(':howtobuild').projectDir}/jvxml-howtobuild-${JVOICEXML_VERSION}.pdf")
                from("${project(':userguide').projectDir}/jvxml-userguide-${JVOICEXML_VERSION}.pdf")
            }
            
            into('demo/org.jvoicexml.demo.helloworlddemo') {
                from(project(':org.jvoicexml.demo.helloworlddemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin",
                    "build.gradle"
                }
                from(project(':org.jvoicexml.demo.helloworlddemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.helloworldservletdemo') {
                from(project(':org.jvoicexml.demo.helloworldservletdemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.helloworldservletdemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.inputdemo') {
                from(project(':org.jvoicexml.demo.inputdemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.inputdemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.jtapidemo') {
                from(project(':org.jvoicexml.demo.jtapidemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.jtapidemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.luis') {
                from(project(':org.jvoicexml.demo.luis').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.luis').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.marcdemo') {
                from(project(':org.jvoicexml.demo.marcdemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.marcdemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.mixedinitiativedemo') {
                from(project(':org.jvoicexml.demo.mixedinitiativedemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.mixedinitiativedemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.mmi.simpledemo') {
                from(project(':org.jvoicexml.demo.mmi.simpledemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.mmi.simpledemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.objecttagdemo') {
                from(project(':org.jvoicexml.demo.objecttagdemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.objecttagdemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.recorddemo') {
                from(project(':org.jvoicexml.demo.recorddemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.recorddemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.scriptdemo') {
                from(project(':org.jvoicexml.demo.scriptdemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.scriptdemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.simpleinputdemo') {
                from(project(':org.jvoicexml.demo.simpleinputdemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.simpleinputdemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.talkingheaddemo') {
                from(project(':org.jvoicexml.demo.talkingheaddemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.talkingheaddemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.textdemo') {
                from(project(':org.jvoicexml.demo.textdemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.textdemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            into('demo/org.jvoicexml.demo.voicexmlcreationdemo') {
                from(project(':org.jvoicexml.demo.voicexmlcreationdemo').projectDir) {
                    exclude "**/build",
                    "**/logging",
                    "**/bin"
                }
                from(project(':org.jvoicexml.demo.voicexmlcreationdemo').projectDir) {
                    include "build.gradle"
                    filter{ it.replaceAll('JVOICEXML_VERSION', "\'${JVOICEXML_VERSION}\'")}
                }
            }
            
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }
}

run {
    dependsOn jvxmlConfigurations
    version = JVOICEXML_VERSION

    mainClassName = "org.jvoicexml.startup.Startup"
    classpath += files("${project(':org.jvoicexml').buildDir}/config")
    jvmArgs = ["-Djvoicexml.config=${project(':org.jvoicexml').buildDir}/config",
               "-Djava.security.policy=${project(':org.jvoicexml').buildDir}/config/jvoicexml.policy",
               "-Djava.library.path=${project(':org.jvoicexml').buildDir}/jni",
               "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager",
               "-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog" ]
}

task(runDebug, type: JavaExec) {
    dependsOn jvxmlConfigurations
    version = JVOICEXML_VERSION

    main = "org.jvoicexml.startup.Startup"
    classpath = sourceSets.main.runtimeClasspath + files("${project(':org.jvoicexml').buildDir}/config")
    jvmArgs = ["-Djvoicexml.config=${project(':org.jvoicexml').buildDir}/config",
               "-Djava.security.policy=${project(':org.jvoicexml').buildDir}/config/jvoicexml.policy",
               "-Djava.library.path=${project(':org.jvoicexml').buildDir}/jni",
               "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager",
               "-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog",
               "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,address=12367" ]
}

task(shutdown, type: JavaExec) {
    dependsOn configurations.jvxmlJNDI

    main = "org.jvoicexml.startup.Shutdown"
    classpath = sourceSets.main.runtimeClasspath + files("${project(':org.jvoicexml').buildDir}/config")
    jvmArgs = ["-Djvoicexml.config=${project(':org.jvoicexml').buildDir}/config",
                             "-Djava.security.policy=file://${project(':org.jvoicexml').buildDir}/config/jvoicexml.policy",
                             "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager",
                             "-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog" ]
}

startScripts {
    classpath += files('../config')
    defaultJvmOpts = [ "-Djava.library.path=lib",
               "-Djava.security.policy=config/jvoicexml.policy",
               "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager",
               "-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog" ]
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\config', '%APP_HOME%\\config')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/config', '$APP_HOME/config')
    }
}
 
mainClassName = "org.jvoicexml.startup.Startup"
applicationName = 'jvxml-startup'

applicationDefaultJvmArgs = ["-Xms512m", "-Xmx1024m"]

task createShutdownApp(type: CreateStartScripts) {
    mainClassName = "org.jvoicexml.startup.Shutdown"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    applicationName = 'jvxml-shutdown'
    defaultJvmOpts = ["-Xms1024m", "-Xmx2048m"]
    classpath += files('../config')
    defaultJvmOpts = [ "-Djava.library.path=lib",
               "-Djava.security.policy=config/jvoicexml.policy",
               "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager",
               "-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog" ]
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\config', '%APP_HOME%\\config')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/config', '$APP_HOME/config')
    }
}

applicationDistribution.into("bin") {
    duplicatesStrategy= DuplicatesStrategy.EXCLUDE
    from(createShutdownApp)
    fileMode = 0755
}
