<project name="org.jvoicexml.callmanager.mmi.servlet" default="war" basedir=".">
    <description>
This file builds the servlet to create MMI responses.
    </description>

    <!-- allow the user to override setting in an own propertiesfile. -->
    <!-- Use the same properties file as in the main project.         -->
    <property file="../org.jvoicexml/personal-props/ant.properties" />
    <property file="../org.jvoicexml/config-props/ant.properties" />

    <!-- Load the settings for 3rdparty libraries -->
    <import file="3rdparty-libs.xml" />

    <target name="-setup" depends="-local-3rdparty-setup">
        <!-- The component built here-->
        <property name="component"
            value="org.jvoicexml.callmanager.mmi.servlet"/>
        <property name="component.path"
          value="org/jvoicexml/callmanager/mmi/servlet"/>

        <property name="src" value="src" />
        <property name="build" value="classes" />
        <property name="config" value="config" />
        <property name="apidoc" value="${apidoc.basedir}/${component}" />
        <property name="dist" value="${jvxml.core.dir}/dist" />

        <property name="dist.war" value="${dist}/${component}.war" />

        <property name="optimize" value="off" />
        <property name="debug" value="on" />

        <!-- the used class path -->
        <path id="build.classpath">
            <fileset refid="jvxml.xml.lib" />
            <fileset refid="servlet.lib" />
        </path>
    </target>

    <target name="-init" depends="-setup">
        <mkdir dir="${build}" />
    </target>

    <target name="-checkJVoiceXML">
        <available classname="org.jvoicexml.xml.vxml.VoiceXmlDocument" property="jvoicexml.present" classpathref="build.classpath" />
        <fail unless="jvoicexml.present">
Cannot find jvoicexml libraries needed to build this demo.
Build this jar from the main project first.
        </fail>
    </target>

    <target name="-checkJEE" description="Check JEE library settings" depends="-init">
        <available classname="javax.servlet.http.HttpServlet" property="servlet.available">
            <classpath>
                <fileset refid="servlet.lib" />
            </classpath>
        </available>
        <fail unless="servlet.available">
Cannot find servlet libraries at '${servlet.lib.dir}'.
Adapt the settings for your servlet container in the file
../personal-props/ant.properties.
      </fail>
        <echo message="servlet.lib.dir = '${servlet.lib.dir}' usable:${servlet.available}" />
    </target>
    
    <target name="configuration">
    </target>

    <target name="clean" depends="-setup" description="Remove all compiled and ditsribution files">
        <delete dir="${build}" />
        <delete file="${war.file}" />
    </target>

    <target name="compile" depends="-init,-checkJVoiceXML,-checkJEE"
        description="Compile the JAVA sources">
        <echo message="compiling with debug=${debug}, optimize=${optimize}" />
        <javac destdir="${build}" optimize="${optimize}" debug="${debug}" deprecation="on" includeantruntime="false">
            <src path="${src}" />
            <include name="**/*.java" />
            <classpath refid="build.classpath" />
            <compilerarg value="-Xlint:unchecked" />
        </javac>
    </target>

    <target name="war" depends="compile" description="Pack all compiled servlet files into a single war">
        <war destfile="${dist.war}" webxml="WebContent/WEB-INF/web.xml">
            <lib dir="${jvxml.core.dir}/dist">
                <include name="org.jvoicexml.xml.jar" />
            </lib>
            <classes dir="${build}">
                <include name="${component.path}/**/*.class" />
            </classes>
            <fileset dir="WebContent">
                <include name="*.html" />
                <include name="*.xsl" />
            </fileset>
        </war>

        <echo message="Install ${dist.war} to your servlet container!" />
    </target>

    <target name="jar" depends="war" />

    <target name="distribution" depends="jar">
        <copy todir="${distFolder}/lib" file="${dist.war}"/>
    </target>
    
    <target name="apidoc" description="create javadoc"
        depends="-setup">
        <echo message="creating javadoc for ${component} with access: ${javadoc.access}" />

        <delete dir="${apidoc}" failonerror="false"/>

        <javadoc destdir="${apidoc}"
                 windowtitle="JVoiceXML"
                 author="true"
                 version="true"
                 access="${javadoc.access}"
                 use="true">
            <packageset dir="${src}" />
            <doctitle>
                <![CDATA[JVoiceXML - a free VoiceXML interpreter]]>
            </doctitle>
            <bottom>
                <![CDATA[<i>Copyright &#169; 2013<a href="http://jvoicexml.sourceforge.net">JVoiceXML group</a>.</i>]]>
            </bottom>
        <tag name="todo" description="Stuff to complete" />
        <classpath>
            <path location="${build}" />
            <path refid="build.classpath" />
        </classpath>

        <!-- Resolve used libraries -->
        <link offline="true"
              href="http://java.sun.com/j2se/1.5.0/docs/api/"
              packagelistLoc="${3rdparty.dir}" />
        <link offline="true" resolveLink="false"
              href="${jvxml.core.apidoc}"
              packagelistLoc="${apidoc.basedir}/org.jvoicexml" />
        <link offline="true" 
              href="http://logging.apache.org/log4j/docs/api/"
              packagelistLoc="${log4j.dir}" />

        <group title="MMI Callmanager Servlet">
            <package name="${component}*" />
        </group>
        </javadoc>
    </target>

    <target name="checkstyle" description="Check for JVoiceXML coding standard" depends="compile, -initcheckstyle" if="checkstyle.present">
        <property name="checkstyle-target.dir" value="${dist}/checkstyle/${component}" />
        <mkdir dir="${checkstyle-target.dir}" />
        <property name="checkstyle.data" value="${checkstyle-target.dir}/checkstyle-data.xml" />
        <checkstyle config="${jvxml.core.dir}/etc/jvoicexml-checks.xml" failonviolation="false">
            <classpath>
                <pathelement path="${project.classpath}" />
                <pathelement location="${build}" />
            </classpath>
            <classpath refid="jvxml.xml.lib" />
            <fileset dir="${src}">
                <include name="${component.path}/**/*.java" />
            </fileset>
            <formatter type="xml" tofile="${checkstyle.data}" />
        </checkstyle>
        <xslt style="${jvxml.core.dir}/etc/checkstyle-frames.xsl" in="${checkstyle.data}" out="${checkstyle-target.dir}/report.html">
            <param name="output.dir" expression="${checkstyle-target.dir}" />
        </xslt>
    </target>
</project>
