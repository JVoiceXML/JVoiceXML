<project name="org.jvoicexml" default="jar" basedir=".">
    <description>
This file builds JVoiceXML.
To override the current settings follow the instructions given in
personal-props/README.txt
  </description>

    <!-- allow the user to override setting in an own propertiesfile. -->
    <property file="personal-props/ant.properties" />
    <property file="config-props/ant.properties" />

    <!-- Buildnumber generated by nightly build -->
    <property file="jvoicexml.buildnumber" />

    <!-- Load the settings for 3rdparty libraries -->
    <import file="3rdparty-libs.xml" />

    <target name="-setup" depends="-3rdparty-setup">
        <!-- The component built here-->
        <property name="component" value="org.jvoicexml"/>

        <!-- directory structure -->
        <property name="src" value="src" />
        <property name="build" value="classes" />
        <property name="dist" value="../${component}/dist" />
        <property name="apidoc" value="doc/api/${component}" />
        <property name="config" value="config" />
        <property name="etc" value="etc" />

        <!-- main jar files -->
        <property name="dist.jvxml.jar" value="${dist}/jvxml.jar" />
        <property name="dist.xml.jar" value="${dist}/jvxml-xml.jar" />
        <property name="dist.jndi.jar" value="${dist}/jvxml-jndi.jar" />
        <property name="dist.client.jar" value="${dist}/jvxml-client.jar" />

        <!-- the class path for 3rdparty libraries -->
        <path id="project.classpath">
            <fileset refid="log4j.lib" />
            <fileset refid="rhino.lib" />
            <fileset refid="spring.lib" />
            <fileset refid="pool.lib" />
            <fileset refid="httpclient.lib" />
            <fileset refid="jlibrtp.lib" />
        </path>

        <!-- Properties for components to use -->
        <condition property="jvxml.text.use">
            <istrue value="${jvxml.text}" />
        </condition>
        <condition property="jvxml.jsapi10.use">
            <istrue value="${jvxml.jsapi10}" />
        </condition>
        <condition property="jvxml.jsapi20.use">
            <istrue value="${jvxml.jsapi20}" />
        </condition>
        <condition property="jvxml.jtapi.use">
            <istrue value="${jvxml.jtapi}" />
        </condition>
      <condition property="jvxml.mrcpv2.use">
          <istrue value="${jvxml.mrcpv2}" />
      </condition>
    </target>

    <target name="-checkJavaVersion">
        <!-- Check if at least java 6 is used. -->
        <condition property="version1.6">
            <or>
                <equals arg1="1.6" arg2="${ant.java.version}" />
            </or>
        </condition>

        <fail unless="version1.6">
You need at leasr java version 1.6 to compile this project.
You are using ${ant.java.version}.
    </fail>
    </target>

    <target name="-init" depends="-setup">
        <!-- Create build directories -->
        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />
    </target>

    <!-- Clean targets of the configured components. -->
    <target name="-cleanTextImplementation" depends="-setup"
        if="jvxml.text.use">
        <ant dir="../org.jvoicexml.implementation.text"
            inheritall="false" target="clean"/>
    </target>

    <target name="-cleanJsapi10Implementation" depends="-setup"
        if="jvxml.jsapi10.use">
        <ant dir="../org.jvoicexml.implementation.jsapi10"
            inheritall="false" target="clean"/>
    </target>

    <target name="-cleanJsapi20Implementation" depends="-setup"
        if="jvxml.jsapi20.use">
        <ant dir="../org.jvoicexml.implementation.jsapi20"
            inheritall="false" target="clean"/>
    </target>

    <target name="-cleanJtapiImplementation" depends="-setup"
        if="jvxml.jtapi.use">
        <ant dir="../org.jvoicexml.implementation.jtapi"
            inheritall="false" target="clean"/>
    </target>

  <target name="-cleanMrcpv2Implementation" depends="-setup"
      if="jvxml.mrcpv2.use">
      <ant dir="../org.jvoicexml.implementation.mrcpv2"
          inheritall="false" target="clean"/>
  </target>

    <target name="-cleancomponents"
        depends="-cleanTextImplementation,-cleanJsapi10Implementation,-cleanJsapi20Implementation,-cleanJtapiImplementation,-cleanMrcpv2Implementation"/>

    <target name="clean" depends="-cleancomponents"
            description="Remove all compiled and distribution files">
        <delete dir="${build}" failonerror="false" />
        <delete failonerror="false">
            <fileset dir="${dist}">
                <include name="*.jar" />
            </fileset>
        </delete>
    </target>

    <target name="-compile"
            depends="-init,-checkJavaVersion"
            description="Compile the core JAVA sources">
        <echo message="compiling core with debug=${javac.debug}, optimize=${javac.optimize}" />
        <echo file="${build}/jvoicexml.version">
jvxml.version=${jvxml.version}
jvxml.buildnumber=${build.number}
        </echo>
        <javac destdir="${build}"
               optimize="${javac.optimize}"
               debug="${javac.debug}"
               deprecation="on"
               encoding="iso-8859-1"
               source="${javac.source}"
               target="${javac.target}">
            <src path="${src}" />
            <exclude name="**/package-info.java" />
            <classpath refid="project.classpath" />
            <compilerarg value="-Xlint:unchecked" />
        </javac>
    </target>

    <!-- Compile targets of the configured components. -->
    <target name="-buildTextImplementation" depends="-setup"
        if="jvxml.text.use">
        <echo message="building org.jvoicexml.implementation.text"/>
        <ant dir="../org.jvoicexml.implementation.text"
            inheritall="false"/>
    </target>

    <target name="-buildJsapi10Implementation" depends="-setup"
        if="jvxml.jsapi10.use">
        <echo message="building org.jvoicexml.implementation.jsapi10"/>
        <ant dir="../org.jvoicexml.implementation.jsapi10"
            inheritall="false"/>
    </target>

    <target name="-buildJsapi20Implementation" depends="-setup"
        if="jvxml.jsapi20.use">
        <echo message="building org.jvoicexml.implementation.jsapi20"/>
        <ant dir="../org.jvoicexml.implementation.jsapi20"
            inheritall="false"/>
    </target>

    <target name="-buildJtapiImplementation" depends="-setup"
        if="jvxml.jtapi.use">
        <echo message="building org.jvoicexml.implementation.jtapi"/>
        <ant dir="../org.jvoicexml.implementation.jtapi"
            inheritall="false"/>
    </target>

  <target name="-buildMrcpv2Implementation" depends="-setup"
      if="jvxml.mrcpv2.use">
      <echo message="building org.jvoicexml.implementation.mrcpv2"/>
      <ant dir="../org.jvoicexml.implementation.mrcpv2"
          inheritall="false"/>
  </target>

  <target name="-buildcomponents"
        depends="-buildTextImplementation, -buildJsapi10Implementation, -buildJsapi20Implementation,-buildJtapiImplementation,-buildMrcpv2Implementation"/>

    <target name="compile"
            depends="-compile, -buildcomponents"
            description="Compile the JAVA sources">
    </target  >

    <target name="jar"
            depends="compile"
            description="Pack all compiled files into jar files">
        <!-- main jar file -->
        <jar jarfile="${dist.jvxml.jar}" compress="false">
            <fileset dir="${build}">
                <include name="jvoicexml.version" />
                <include name="org/jvoicexml/**/*.class" />
                <exclude name="org/jvoicexml/**/Test*.class" />
                <exclude name="org/jvoicexml/xml/**" />
                <exclude name="org/jvoicexml/jndi/**" />
                <exclude name="org/jvoicexml/client/**" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <section name="common">
                    <attribute name="Implementation-Vendor"
                               value="JVoiceXML group" />
                    <attribute name="Implementation-Title"
                               value="JVoiceXML main" />
                </section>
            </manifest>
        </jar>

        <!-- xml jar file -->
        <jar jarfile="${dist.xml.jar}" compress="false">
            <fileset dir="${build}">
                <include name="org/jvoicexml/xml/**/*.class" />
                <exclude name="org/jvoicexml/**/Test*.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <section name="common">
                    <attribute name="Implementation-Vendor"
                               value="JVoiceXML group" />
                    <attribute name="Implementation-Title"
                               value="JVoiceXML xml library" />
                </section>
            </manifest>
            <metainf prefix="META-INF/services"
                file="${etc}/services/org.jvoicexml.xml.srgs.GrammarTypeFactory"/>
        </jar>

    	<!-- client jar file -->
        <jar jarfile="${dist.client.jar}" compress="false">
            <fileset dir="${build}">
                <include name="org/jvoicexml/JVoiceXml.class" />
                <include name="org/jvoicexml/Session.class" />
                <include name="org/jvoicexml/CallControl.class" />
                <include name="org/jvoicexml/CharacterInput.class" />
                <include name="org/jvoicexml/RemoteClient.class" />
                <include name="org/jvoicexml/RemoteConnectable.class" />
                <include name="org/jvoicexml/implementation/UserInputListener.class" />
                <include name="org/jvoicexml/event/**/*.class" />
                <include name="org/jvoicexml/client/**/*.class" />
                <include name="org/jvoicexml/documentserver/schemestrategy/MappedDocumentRepository.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <section name="common">
                    <attribute name="Implementation-Vendor"
                               value="JVoiceXML group" />
                    <attribute name="Implementation-Title"
                               value="JVoiceXML client files" />
                </section>
            </manifest>
        </jar>

      <!-- jndi jar file -->
      <jar jarfile="${dist.jndi.jar}" compress="false">
          <fileset dir="${build}">
              <include name="org/jvoicexml/jndi/**/*.class" />
          </fileset>
          <manifest>
              <attribute name="Built-By" value="${user.name}" />
              <section name="common">
                  <attribute name="Implementation-Vendor"
                             value="JVoiceXML group" />
                  <attribute name="Implementation-Title"
                             value="JVoiceXML JNDI library" />
              </section>
          </manifest>
      </jar>
    </target>

    <target name="rebuild"
            description="Rebuild the jars from scratch"
            depends="clean,jar" />


  <!-- Apidoc targets of the configured components. -->
  <target name="-apidocTextImplementation" depends="-setup"
      if="jvxml.text.use">
      <echo message="creating apidoc for org.jvoicexml.implementation.text"/>
      <ant dir="../org.jvoicexml.implementation.text" target="apidoc"
          inheritall="false"/>
  </target>

  <target name="-apidocJsapi10Implementation" depends="-setup"
      if="jvxml.jsapi10.use">
      <echo message="creating apidoc for org.jvoicexml.implementation.jsapi10"/>
      <ant dir="../org.jvoicexml.implementation.jsapi10" target="apidoc"
          inheritall="false"/>
  </target>

  <target name="-apidocJsapi20Implementation" depends="-setup"
      if="jvxml.jsapi20.use">
      <echo message="creating apidoc for org.jvoicexml.implementation.jsapi20"/>
      <ant dir="../org.jvoicexml.implementation.jsapi20" target="apidoc"
          inheritall="false"/>
  </target>

  <target name="-apidocJtapiImplementation" depends="-setup"
      if="jvxml.jtapi.use">
      <echo message="creating apidoc for org.jvoicexml.implementation.jtapi"/>
      <ant dir="../org.jvoicexml.implementation.jtapi" target="apidoc"
          inheritall="false"/>
  </target>

  <target name="-apidocMrcpv2Implementation" depends="-setup"
    if="jvxml.mrcpv2.use">
    <echo message="creating apidoc for org.jvoicexml.implementation.mrcpv2"/>
    <ant dir="../org.jvoicexml.implementation.mrcpv2" target="apidoc"
        inheritall="false"/>
  </target>

  <target name="-apidocComponents"
      depends="-apidocTextImplementation, -apidocJsapi10Implementation, -apidocJsapi20Implementation,-apidocJtapiImplementation,-apidocMrcpv2Implementation"/>

    <target name="coreapidoc" depends="-setup">
        <echo message="creating javadoc with access: ${javadoc.access}" />
        <delete dir="${apidoc}" />
        <javadoc destdir="${apidoc}"
                 windowtitle="JVoiceXML Core"
                 author="true"
                 version="true"
                 linksource="true"
                 access="${javadoc.access}"
                 use="true">
            <packageset dir="${src}" />
            <classpath refid="project.classpath" />
            <doctitle>
                <![CDATA[JVoiceXML - a free VoiceXML interpreter]]>
            </doctitle>
            <bottom>
                <![CDATA[<i>Copyright &#169; 2005-2009<a href="http://jvoicexml.sourceforge.net">JVoiceXML group</a>.</i>]]>
            </bottom>
        <!-- Custom tags -->
        <tag name="todo" description="Stuff to complete" />
        <tag name="created" description="Creation date" />
        <tag name="updated" description="Update date" />

        <!-- Resolve used libraries -->
        <link offline="true"
              href="http://java.sun.com/javase/6/docs/api/"
              packagelistLoc="${3rdparty.dir}" />
        <link offline="true"
              href="http://www.mozilla.org/rhino/apidocs/"
              packagelistLoc="${rhino.dir}" />
        <link offline="true" 
              href="http://logging.apache.org/log4j/docs/api/"
              packagelistLoc="${log4j.dir}" />
        <link offline="true"
              href="http://www.springframework.org/api"
              packagelistLoc="${spring.dir}" />

        <!-- Group definitions -->
        <group title="Parsing and creation of VoiceXML documents">
            <package name="org.jvoicexml.xml*" />
        </group>
        <group title="Implementation platform">
            <package name="org.jvoicexml.implementation*" />
        </group>
        <group title="Call manager">
            <package name="org.jvoicexml.callmanager*" />
        </group>
        <group title="Document Server">
            <package name="org.jvoicexml.documentserver*" />
        </group>
        <group title="Events">
            <package name="org.jvoicexml.event*" />
        </group>
        <group title="Configuration">
            <package name="org.jvoicexml.config*" />
        </group>
        <group title="Main package containing the VoiceXML interpreter">
            <package name="org.jvoicexml.interpreter*" />
        </group>
        <group title="JNDI support">
            <package name="org.jvoicexml.jndi*" />
        </group>
        <group title="Client based interaction">
            <package name="org.jvoicexml.client*" />
        </group>
        </javadoc>
    </target>

    <target name="apidoc" depends="coreapidoc,-apidocComponents"
        description="Create JAVADOC documentation"/>

    <target name="checkstyle"
        description="Check for JVoiceXML coding standard"
        depends="compile, -initcheckstyle"
        if="checkstyle.present">
        <property name="checkstyle-target.dir"
          value="${dist}/checkstyle/${component}" />
        <mkdir dir="${checkstyle-target.dir}"/>
        <property name="checkstyle.data"
          value="${checkstyle-target.dir}/checkstyle-data.xml" />
        <checkstyle config="${etc}/jvoicexml-checks.xml">
            <classpath>
                <pathelement path="${project.classpath}" />
                <pathelement location="${build}" />
            </classpath>
            <fileset dir="${src}">
                <include name="org/jvoicexml/**/*.java" />
            </fileset>
            <formatter type="xml" tofile="${checkstyle.data}"/>
        </checkstyle>
        <xslt style="${etc}/checkstyle-frames.xsl"
              in="${checkstyle.data}"
              out="${checkstyle-target.dir}/report.html">
          <param name="output.dir" expression="${checkstyle-target.dir}"/>
        </xslt>
    </target>
</project>
